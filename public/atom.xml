<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jesse Cravens]]></title>
  <link href="http://jessecravens.com/atom.xml" rel="self"/>
  <link href="http://jessecravens.com/"/>
  <updated>2013-03-15T13:15:52-05:00</updated>
  <id>http://jessecravens.com/</id>
  <author>
    <name><![CDATA[Jesse Cravens]]></name>
    <email><![CDATA[jesse.cravens@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SXSWi 2013: 'Battle of the HTML5 Hackers' and 'HTML5 Hacks' Book Signing]]></title>
    <link href="http://jessecravens.com/blog/2013/03/12/sxswi-2013-battle-of-the-html5-hackers/"/>
    <updated>2013-03-12T23:55:00-05:00</updated>
    <id>http://jessecravens.com/blog/2013/03/12/sxswi-2013-battle-of-the-html5-hackers</id>
    <content type="html"><![CDATA[<p>We had a great turnout for the &#8216;Battle of the HTML5 Hackers&#8217; presentation at SXSWi on Tuesday.</p>

<p><img class="imgL300" alt="SXSWi 2013: Battle of the HTML5 Hackers - Jesse Cravens and Jeff Burtoft" src="http://jessecravens.com/images/sxsw13/sxsw13-crowd.jpg"></p>

<p>Using our best CDD (Conference Driven Devlopment) techniques, we walked the audience through the creation of <a href="http://nerdclustr.jit.su">Nerdclustr</a>: an HTML5 mobile Application that helps nerds find other like-minded nerds at conferences events.</p>

<p>Using realtime and mapping technolgies, the app visualizes nerd behavior in map pin clusters.</p>

<p><img class="imgR200" alt="Nerdclustr: SXSWi 2013 Ballroom G Austin Convention Center"  src="http://jessecravens.com/images/sxsw13/sxsw13-app.png"></p>

<p>Here is a shot of the app in action (Ballroom G in the Austin Convention Center); it performed well during the presentation. Thanks to <a href="https://www.nodejitsu.com/">Nodjitsu</a> for the quality node.js WebSocket service. After a 2-day hackathon to get the app launched, I ran through a number of deployment options, many of which I have used before for Rails applications. <a href="https://www.nodejitsu.com/">Nodjitsu</a> won out in that it actually supported the WebSokcet protocol and made deployment super simple using the jitsu CLI.</p>

<p><img class="imgL200" alt="Jesse Cravens and Jeff Burtoft: SXSWi 2013 - HTML5 Hacks Book Signing"  src="http://jessecravens.com/images/sxsw13/sxsw13-booksigning.png"></p>

<p>Nerdclustr source code is available <a href="https://github.com/html5hacks/nerd-clustr">here</a>.</p>

<p>During the book signing, the bookstore informed us there were only 3 copies left. I&#8217;m not keen to the selection process of books, but I was little surprised at the limited number of technical books. This is certainly a reflection of the SXSWi demographic, and we also tailored our content and presentation style to this audience.</p>

<p>The slide deck is available here:</p>

<script async class="speakerdeck-embed" data-id="c69c92f06d880130bfaa22000a1f8363" data-ratio="1.77777777777778" src="http://jessecravens.com//speakerdeck.com/assets/embed.js"></script>




<hr>


<p>Stay tuned for our next presentation happening online, through O&#8217;Reilly Webcasts. Join us for <a href="http://www.oreillynet.com/pub/e/2566">&#8216;Rethinking the Possibilities of Browser-based Apps with HTML5&#8217;</a> on Wednesday, March 27, 2013 10AM PT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5.tx 2013]]></title>
    <link href="http://jessecravens.com/blog/2013/02/03/html5-dot-tx-2013/"/>
    <updated>2013-02-03T23:09:00-06:00</updated>
    <id>http://jessecravens.com/blog/2013/02/03/html5-dot-tx-2013</id>
    <content type="html"><![CDATA[<h3>Embedded JavaScript, HTML5 and the Internet of Things</h3>

<iframe width="560" height="315" src="http://www.youtube.com/embed/H00_BGRkBRM" frameborder="0" allowfullscreen></iframe>




<script async class="speakerdeck-embed" data-slide="46" data-id="92b31ab050b501308fcd1231381d555c" data-ratio="1.2994923857868" src="http://jessecravens.com//speakerdeck.com/assets/embed.js"></script>


<p>I had a great time presenting at HTML5.tx 2013; here is an embed above of the slide deck. I should have the trailr node module in a presentable format soon and I&#8217;ll tweet its inclusion in NPM. I have a placeholder here: <a href="https://npmjs.org/package/trailr">trailr at npm</a></p>

<p>I also pushed out the ver.1 trailr-admin UI here: <a href="http://trailr-admin.herokuapp.com/dashboard">trailr-admin.herokuapp.com</a></p>

<p>Most of the demos are included in the nodejshacks-emedded repo here: <a href="https://github.com/nodejshacks/nodejshacks-embedded">https://github.com/nodejshacks</a></p>

<p>Very soon, initial documentation will be available at: <a href="http://trailr.io">trailr.io</a></p>

<p><img class="" alt=""  src="http://jessecravens.com/images/html5tx2013/embedded.JPG"></p>

<p>Photo credit: Mitch Fincher: <a href="http://mitchfincher.blogspot.com/2013/02/pictures-from-html5tx-2013-in-austin-tx.html">mitchfincher.blogspot.com</a></p>

<h3>HTML5 Canvas View</h3>

<p><img class="" alt=""  src="http://jessecravens.com/images/html5tx2013/dash.png"></p>

<h3>Node.js trailr module - Web Based Edit (Ace Editor) and WebSocket Deploy to Arduino</h3>

<p><img class="" alt=""  src="http://jessecravens.com/images/html5tx2013/edit.png"></p>

<p><img class="" alt=""  src="http://jessecravens.com/images/html5tx2013/embedded2.JPG"></p>

<p>Photo credit: Mitch Fincher: <a href="http://mitchfincher.blogspot.com/2013/02/pictures-from-html5tx-2013-in-austin-tx.html">mitchfincher.blogspot.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Milestone Calendar with IndexedDB and FullCalendar.js]]></title>
    <link href="http://jessecravens.com/blog/2013/01/17/build-a-milestone-calendar-with-indexeddb-and-fullcalendar-dot-js/"/>
    <updated>2013-01-17T08:47:00-06:00</updated>
    <id>http://jessecravens.com/blog/2013/01/17/build-a-milestone-calendar-with-indexeddb-and-fullcalendar-dot-js</id>
    <content type="html"><![CDATA[<h4>IndexedDB is a persistent object data store in the browser. Although it is not a full SQL implementation and it is more complex than the unstructured key–value pairs in localStorage, you can use it to define an API that provides the ability to read and write key–value objects as structured JavaScript objects, and an indexing system that facilitates filtering and lookup.</h4>

<p>For this hack we will use IndexedDB to store milestone objects for a calendar application. The UI will provide a simple means to create a new milestone and provide a title, start date, and end date. The calendar will then update to show the contents of the local data store. Figure 6-8 shows the result.</p>

<p>Figure 6-8. FullCalendar.js and IndexedDB</p>

<p><img class="figure" alt="Figure 6-8" src="http://jessecravens.com/images/chapter6-images/6-8.png"></p>

<p>We need to start by including the markup for the two pieces of the UI: the calendar and the form.
We’ll begin with the form. You may notice that the input fields for the dates include data-date-format attributes. We will use these later for the JavaScript date pickers.</p>

<figure class='code'><figcaption><span>milestone form </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;form>
</span><span class='line'>     &lt;fieldset>
</span><span class='line'>
</span><span class='line'>       &lt;div class="control-group">
</span><span class='line'>         &lt;label class="control-label">Add a Milestone&lt;/label>
</span><span class='line'>         &lt;div class="controls">
</span><span class='line'>           &lt;h2>New Milestone&lt;/h2>
</span><span class='line'>           &lt;input type="text" name="title" value="">
</span><span class='line'>           &lt;input type="text" class="span2" name="start"
</span><span class='line'>             value="07/16/12" data-date-format="mm/dd/yy" id="dp1" >
</span><span class='line'>           &lt;input type="text" class="span2" name="end"
</span><span class='line'>             value="07/17/12"  data-date-format="mm/dd/yy" id="dp2" >
</span><span class='line'>         &lt;/div>
</span><span class='line'>       &lt;/div>
</span><span class='line'>
</span><span class='line'>       &lt;div class="form-actions">
</span><span class='line'>          &lt;button type="submit" class="btn btn-primary">Save&lt;/button>
</span><span class='line'>          &lt;button class="btn">Cancel&lt;/button>
</span><span class='line'>       &lt;/div>
</span><span class='line'>
</span><span class='line'>      &lt;/fieldset>
</span><span class='line'> &lt;/form></span></code></pre></td></tr></table></div></figure>


<p>The calendar is provided by <a href="http://arshaw.com/fullcalendar/">FullCalendar.js</a>, a fantastic jQuery plug-in for generating robust calendars from event sources. The library will generate a calendar from a configuration object and a simple div.</p>

<figure class='code'><figcaption><span>simple div </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id='calendar'>&lt;/div></span></code></pre></td></tr></table></div></figure>


<p>And we can’t forget to include a few dependencies:</p>

<figure class='code'><figcaption><span>CSS and JavaScript dependencies </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;link href="../assets/css/datepicker.css" rel="stylesheet">
</span><span class='line'>&lt;link href="../assets/css/fullcalendar.css" rel="stylesheet">
</span><span class='line'>
</span><span class='line'>&lt;script src="http://code.jquery.com/jquery-1.7.1.min.js">&lt;/script>
</span><span class='line'>&lt;script src="../assets/js/bootstrap-datepicker.js">&lt;/script>
</span><span class='line'>&lt;script src="../assets/js/fullcalendar.min.js">&lt;/script></span></code></pre></td></tr></table></div></figure>


<p>To improve the user experience, we will also include date pickers for choosing the dates within the form fields for start and end dates (see Figure 6-9).</p>

<p>Figure 6-9. Date pickers</p>

<p><img class="figure" alt="Figure 6-9" src="http://jessecravens.com/images/chapter6-images/6-9.png"></p>

<p>To instantiate the date pickers we will include the following toward the beginning of our script:</p>

<figure class='code'><figcaption><span>instantiate the date pickers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(function(){
</span><span class='line'>    $('#dp1').datepicker();
</span><span class='line'>    $('#dp2').datepicker();
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<h3>The Milestone IndexedDB</h3>

<p>Now we will set up a global namespace to hold our code, and set up a public milestones array (within the namespace) to hold our milestones temporarily while we pass them between our database and the FullCalendar API. This should make more sense as you continue to read. While we are at it we will need to normalize our indexedDB variable across all of the vendor-specific properties.</p>

<figure class='code'><figcaption><span>namespace and normalize </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var html5hacks = {};
</span><span class='line'>
</span><span class='line'>html5hacks.msArray = [];
</span><span class='line'>
</span><span class='line'>var indexedDB = window.indexedDB || window.webkitIndexedDB ||
</span><span class='line'>                window.mozIndexedDB;
</span><span class='line'>
</span><span class='line'>if ('webkitIndexedDB' in window) {
</span><span class='line'>  window.IDBTransaction = window.webkitIDBTransaction;
</span><span class='line'>  window.IDBKeyRange = window.webkitIDBKeyRange;
</span><span class='line'>}
</span><span class='line'>Now we can begin to set up our database:
</span><span class='line'>html5hacks.indexedDB = {};
</span><span class='line'>html5hacks.indexedDB.db = null;
</span><span class='line'>
</span><span class='line'>function init() {
</span><span class='line'>  html5hacks.indexedDB.open();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>init();</span></code></pre></td></tr></table></div></figure>


<p>This will obviously fail for now, but as you can see the initialization begins by calling the open() method on an html5hacks.indexedDB. So let’s take a closer look at open():</p>

<figure class='code'><figcaption><span>open() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html5hacks.indexedDB.open = function() {
</span><span class='line'>
</span><span class='line'>  var request = indexedDB.open("milestones");
</span><span class='line'>
</span><span class='line'>  request.onsuccess = function(e) {
</span><span class='line'>    var v = "1";
</span><span class='line'>    html5hacks.indexedDB.db = e.target.result;
</span><span class='line'>
</span><span class='line'>    var db = html5hacks.indexedDB.db;
</span><span class='line'>
</span><span class='line'>    if (v!= db.version) {
</span><span class='line'>      var setVrequest = db.setVersion(v);
</span><span class='line'>      setVrequest.onerror = html5hacks.indexedDB.onerror;
</span><span class='line'>
</span><span class='line'>      setVrequest.onsuccess = function(e) {
</span><span class='line'>        if(db.objectStoreNames.contains("milestone")) {
</span><span class='line'>          db.deleteObjectStore("milestone");
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        var store = db.createObjectStore("milestone",
</span><span class='line'>          {keyPath: "timeStamp"});
</span><span class='line'>
</span><span class='line'>        html5hacks.indexedDB.init();
</span><span class='line'>      };
</span><span class='line'>    }
</span><span class='line'>    else {
</span><span class='line'>      html5hacks.indexedDB.init();
</span><span class='line'>    }
</span><span class='line'>  };
</span><span class='line'>  request.onerror = html5hacks.indexedDB.onerror;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>First, we need to open the database and pass a name. If the database successfully opens and a connection is made, the onsuccess() callback will be fired.</p>

<p>Within the onsuccess, we then check for a version and call setVersion() if one does not exist. Then we will call createObjectStore() and pass a unique timestamp within the keypath property.</p>

<p>Finally, we call init() to build the calendar and attach the events present in the database.</p>

<figure class='code'><figcaption><span>onsuccess() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html5hacks.indexedDB.init = function() {
</span><span class='line'>
</span><span class='line'>  var db = html5hacks.indexedDB.db;
</span><span class='line'>  var trans = db.transaction(["milestone"], IDBTransaction.READ_WRITE);
</span><span class='line'>  var store = trans.objectStore("milestone");
</span><span class='line'>
</span><span class='line'>  var keyRange = IDBKeyRange.lowerBound(0);
</span><span class='line'>  var cursorRequest = store.openCursor(keyRange);
</span><span class='line'>
</span><span class='line'>  cursorRequest.onsuccess = function(e) {
</span><span class='line'>    var result = e.target.result;
</span><span class='line'>
</span><span class='line'>    if(!result == false){
</span><span class='line'>
</span><span class='line'>        $('#calendar').fullCalendar({
</span><span class='line'>          header: {
</span><span class='line'>            left: 'prev,next today',
</span><span class='line'>            center: 'title',
</span><span class='line'>            right: 'month,agendaWeek,agendaDay'
</span><span class='line'>          },
</span><span class='line'>          weekmode: 'variable',
</span><span class='line'>          height: 400,
</span><span class='line'>          editable: true,
</span><span class='line'>          events: html5hacks.msArray
</span><span class='line'>        });
</span><span class='line'>
</span><span class='line'>      return;
</span><span class='line'>
</span><span class='line'>    }else{
</span><span class='line'>
</span><span class='line'>      console.log("result.value" , result.value);
</span><span class='line'>      buildMilestoneArray(result.value);
</span><span class='line'>      result.continue();
</span><span class='line'>    }
</span><span class='line'>  };
</span><span class='line'>  cursorRequest.onerror = html5hacks.indexedDB.onerror;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>At this point we are poised to retrieve all the data from the database and populate our calendar with milestones.
First, we declare the type of transaction to be a READ_WRITE, set a reference to the datastore, set a keyrange, and define a cursorRequest by calling openCursor and passing in the keyrange. By passing in a 0, we ensure that we retrieve all the values greater than zero. Since our key was a timestamp, this will ensure we retrieve all the records.</p>

<p>Once the onsuccess event is fired, we begin to iterate through the records and push the milestone objects to buildMilestoneArray:</p>

<figure class='code'><figcaption><span>buildMilestoneArray() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function buildMilestoneArray(ms) {
</span><span class='line'>  html5hacks.msArray.push(ms);
</span><span class='line'>}
</span><span class='line'>When we reach the last record, we build the calendar by passing a configuration object to fullCalendar() and returning:
</span><span class='line'>        $('#calendar').fullCalendar({
</span><span class='line'>          header: {
</span><span class='line'>            left: 'prev,next today',
</span><span class='line'>            center: 'title',
</span><span class='line'>            right: 'month,agendaWeek,agendaDay'
</span><span class='line'>          },
</span><span class='line'>          weekmode: 'variable',
</span><span class='line'>          height: 400,
</span><span class='line'>          editable: true,
</span><span class='line'>          events: html5hacks.msArray
</span><span class='line'>        });
</span><span class='line'>
</span><span class='line'>      return;</span></code></pre></td></tr></table></div></figure>


<h3>Adding Milestones</h3>

<p>Now that we are initializing and building our calendar, we need to begin adding milestones to the database via the form. First let’s use jQuery to set up our form to pass a serialized data object to addMilestone() on each submission:</p>

<figure class='code'><figcaption><span>form submit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$('form').submit(function() {
</span><span class='line'>
</span><span class='line'>    var data = $(this).serializeArray();
</span><span class='line'>
</span><span class='line'>    html5hacks.indexedDB.addMilestone(data);
</span><span class='line'>    return false;
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<p>Now let’s submit a few events and then view them in the Chrome Inspector to ensure they are there (see Figure 6-10).</p>

<p>Figure 6-10. Viewing milestone objects in the Chrome Inspector</p>

<p><img class="figure" alt="Figure 6-10" src="http://jessecravens.com/images/chapter6-images/6-10.png"></p>

<p>Let’s take a closer look at our addMilestone method:</p>

<figure class='code'><figcaption><span>addMilestone() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>html5hacks.indexedDB.addMilestone = function(d) {
</span><span class='line'>  var db = html5hacks.indexedDB.db;
</span><span class='line'>  var trans = db.transaction(["milestone"], IDBTransaction.READ_WRITE);
</span><span class='line'>  var store = trans.objectStore("milestone");
</span><span class='line'>
</span><span class='line'>  var data = {
</span><span class='line'>    "title": d[0].value,
</span><span class='line'>    "start": d[1].value,
</span><span class='line'>    "end": d[2].value,
</span><span class='line'>    "timeStamp": new Date().getTime()
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  var request = store.put(data);
</span><span class='line'>
</span><span class='line'>  var dataArr = [data]
</span><span class='line'>  request.onsuccess = function(e) {
</span><span class='line'>    $('#calendar').fullCalendar('addEventSource', dataArr);
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  request.onerror = function(e) {
</span><span class='line'>    console.log("Error Adding: ", e);
</span><span class='line'>  };
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>We established our read/write connection in much the same way as our html5hacks.indexedDB.init(), but now, instead of only reading data, we write a data object to the data store each time by calling store.put() and passing it data. On the onsuccess we then can call fullcalendar’s addEventSource() and pass it the data wrapped in an array object. Note that it is necessary to transform the data object into an array since that is what the FullCalendar API expects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Client/Server 3.0: 6 Ways JavaScript is Revolutionizing the Client/Server Relationship]]></title>
    <link href="http://jessecravens.com/blog/2012/11/28/client-server-3-dot-0-6-ways-javascript-is-revolutionizing-the-client-server-relationship/"/>
    <updated>2012-11-28T10:02:00-06:00</updated>
    <id>http://jessecravens.com/blog/2012/11/28/client-server-3-dot-0-6-ways-javascript-is-revolutionizing-the-client-server-relationship</id>
    <content type="html"><![CDATA[<p>Im giving a talk at Devcon 5 - San Francisco this afternoon: Client/Server 3.0: 6 Ways JavaScript is Revolutionizing the Client/Server Relationship. Here is the other talks on the agenda: <a href="http://www.html5report.com/conference/california/agenda.aspx">Devcon 5 - San Francisco</a>.</p>

<p>Here is a brief summary:</p>

<h3>1 Device Access Within the Browser</h3>

<p>The client gets smarter.</p>

<p>JavaScript Device APIs continue to evolve, allowing more access to device hardware, services and applications such as the camera, microphone, system sensors, native address books, calendars and native messaging applications.
We will explore examples utilizing GeoLocation API, and Device Orientation.</p>

<h3>2 Client Side Processing w/ Background Threads</h3>

<p>The modern web browser&#8217;s runtime is a single threaded, event loop. Asynchronous programming models, reactionary systems design actually benefit from this architecture. Maturing interpreters improve performance. Web Workers API enables background threads in the browser, making heavy computations realistic.</p>

<p>So, the client gets more powerful, and becomes an application development evnvironment.
We will explore Web Workers processing heavy computations without blocking the UI for further user interaction.</p>

<h3>3 Device Detection and Descriptors / Adaptive Frameworks</h3>

<p>Responsive Web Design is great, but it often isn&#8217;t enough for larger applications, and applications that need to reach a highly fragmented device market. Adaptive frameworks use DDRs (Device Description Repositories)</p>

<p>We will explore a framework that mixes the best of Responsive with the best of Adaptive: <a href="https://github.com/jessecravens/responderjs">responderJS</a>.</p>

<h3>4 HTML5 Connectivity Revolution and HTTP 2.0</h3>

<p>Peter Lubbers coined the term, HTML5 Connectivity Revolution, to describe the next level, web network technologies such as: Web Sockets API, XHR2, Event Source and Server Sent Events, SPDY, CORS.</p>

<p>Engage in a demo of <a href="https://github.com/jessecravens/robodeck">robodeck</a>, a Web Socket driven Collaborative presenations framework.</p>

<h3>5 Single Runtime, Shared Syntax &#8230; the right way</h3>

<p>Node.js has enabled the same language, single runtime. But, the paradigms are still quite different. Node streams, inspired by Linux pipes, make IO easy and intuitive. Explore pipe(), pump(), and events in Node streams.</p>

<p>Solutions like Browserify, help bring Node.js libraries and NPM dependency management to the browser. Next up, Domnode, wrapping common, client-side, I/O bound APIs (XHR, SSE, WebRTC, etc.) in Node streams syntax.</p>

<h3>6 Embedded JavaScript</h3>

<p>With Node.js, Angstrom Linux, and cloud document stores like MongoDB, the server is now embedded in the microcontroller client.</p>

<p>We will explore Arduino wrappers, and Node.js running on the Beaglebone from Texas Instruments.</p>

<p>The combination of Linux and JavaScript open worlds of opportunity.</p>

<p>Here is the node.js server used on the Beaglebone in the demo: <a href="https://github.com/jessecravens/beagleserver">beagleserver</a>.
The Johnny Five code is located here: <a href="https://github.com/nodejshacks/nodejshacks-embedded">node-embedded</a></p>

<script async class="speakerdeck-embed" data-slide="4" data-id="086813701bf601302fbe22000a1f8a4e" data-ratio="1.2994923857868" src="http://jessecravens.com//speakerdeck.com/assets/embed.js"></script>




<iframe width="560" height="315" src="http://www.youtube.com/embed/eahWOUYqr90" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Amazon S3 for Cross Origin Resourse Sharing to Host a Web Font]]></title>
    <link href="http://jessecravens.com/blog/2012/11/18/configure-amazon-s3-for-cross-origin-resourse-sharing-to-host-a-web-font/"/>
    <updated>2012-11-18T19:42:00-06:00</updated>
    <id>http://jessecravens.com/blog/2012/11/18/configure-amazon-s3-for-cross-origin-resourse-sharing-to-host-a-web-font</id>
    <content type="html"><![CDATA[<p>Cross-Origin Resource Sharing (CORS) is a specification that allows applications to
make requests to other domains from within the browser. With CORS you have a secure
and easy-to-implement approach for circumventing the browser’s same origin
policy.</p>

<p>In this hack we will explore hosting a web font on a cloud drive. In order to do so, we
will learn how to configure an Amazon S3 bucket to accept requests from other domains.</p>

<p>If you are not already familiar with web fonts and @font-face, refer to Hack #12.</p>

<p>In the next section I provide a bit more background on Amazon S3 and the same origin
policy, before we get into the details of CORS.</p>

<h3>What Is an Amazon S3 Bucket?</h3>

<p>Amazon S3 (Simple Storage Service) is simply a cloud drive. Files of all kinds can be
stored using this service, but web application developers often use it to store static
assets such as images, JavaScript files, and stylesheets.</p>

<p>For performance improvements, web developers like to employ Content Delivery Networks
(CDNs) to serve their static files. While Amazon S3 is not a CDN in and of itself,
it’s easy to activate it as one by using CloudFront.</p>

<p>A bucket refers to the directory name that you choose to store your static files.
To get started let’s set up an account at Amazon and navigate to the Amazon Management
Console; see Figure 9-21.</p>

<p>Figure 9-21. S3 Management Console</p>

<p><img class="figure" alt="Figure 9-21" src="http://jessecravens.com/images/chapter9-images/9-21.png"></p>

<p>If we click on Create a Bucket we should see the prompt shown in Figure 9-22.</p>

<p>Figure 9-22. Creating an S3 bucket in the S3 Management Console</p>

<p><img class="figure" alt="Figure 9-22" src="http://jessecravens.com/images/chapter9-images/9-22.png"></p>

<p>Let’s name the bucket and choose a region (see Figure 9-23). As I stated earlier, you
can choose a region to optimize for latency, minimize costs, or address regulatory
requirements.</p>

<p>Figure 9-23. Naming an S3 bucket in the S3 Management Console</p>

<p><img class="figure" alt="Figure 9-23" src="http://jessecravens.com/images/chapter9-images/9-23.png"></p>

<p>We will go ahead and name our bucket none other than “html5hacks.” You should now
see an admin screen that shows an empty filesystem (see Figure 9-24).</p>

<p>Figure 9-24. The html5hacks S3 bucket</p>

<p><img class="figure" alt="Figure 9-24" src="http://jessecravens.com/images/chapter9-images/9-24.png"></p>

<p>Well, that was simple. So why are we doing this? Let’s start with some simple browser
security—something called the same origin policy.</p>

<h3>Same Origin Policy</h3>

<p>As the browser becomes more and more of an application platform, application developers
have compelling reasons to write code that makes requests to other domains
in order to interact directly with the content. Wikipedia defines same origin policy as
follows:</p>

<p>In computing, the same origin policy is an important security concept for a
number of browser-side programming languages, such as JavaScript. The
policy permits scripts running on pages originating from the same site to
access each other’s methods and properties with no specific restrictions,
but prevents access to most methods and properties across pages on different
sites.1</p>

<p>1 http://en.wikipedia.org/wiki/Same_origin_policy</p>

<p>As stated in Wikipedia’s definition, the same origin policy is a good thing; it protects
the end user from security attacks. But it does cause some challenges for web developers.</p>

<p>This is where CORS comes into the picture. CORS allows developers of remote data
and content to designate which domains (through a whitelist) can interact with their
content.</p>

<h3>Using Web Fonts in Your Application</h3>

<p>There are a number of ways to use a web font within your web pages, such as calling
the @font-face service, bundling the font within your application, hosting the web font
in your own Amazon S3 bucket (more on this later), or converting the file to Base64
and embedding the data inline in a data-uri. By the way, the last technique is similar
to the one outlined in Hack #13.</p>

<p>Each of these techniques has limitations.</p>

<ul>
<li>When calling the @font-face service you are limited to the fonts within the particular
service’s database.</li>
<li>Bundling the font within your application does not make use of HTTP caching, so
your application will continue to download the font file on every page request.
Furthermore, you cannot reuse the font within other applications.</li>
<li>Hosting the font in an Amazon S3 bucket works great, except with Firefox, which
enforces the same origin policy on all resources. So the response from the remote
server will be denied.</li>
<li>Converting the font to Base64 adds additional weight to the stylesheet, and does
not take advantage of caching.</li>
</ul>


<p>An exploration into the different types of web fonts is beyond the scope of this hack,
so I will assume that you have already selected the web font BebasNeue.otf.
You can download free and open fonts from sites such as http://www.dafont.com.</p>

<h3>Uploading Your Font to Your Amazon S3 Bucket</h3>

<p>Now, all we have to do is to upload the font onto our filesystem in the cloud (see
Figure 9-25).</p>

<p>Figure 9-25. An uploaded BebasNeue font</p>

<p><img class="figure" alt="Figure 9-25" src="http://jessecravens.com/images/chapter9-images/9-25.png"></p>

<h3>Adding the Web Font to Your Web Page</h3>

<p>In order to add a web font to our page, we need to add a single stylesheet to an HTML
page.</p>

<p>Here is our page. Let’s call it index.html, and add a <link> tag pointing to our base
stylesheet, styles.css.</p>

<figure class='code'><figcaption><span>geo.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>S3 - font<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;styles.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;test&quot;</span><span class="nt">&gt;</span>HTML5 Hacks<span class="err">&lt;</span>/&gt;
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our styles.css let’s add the following and point to our uploaded file. Also, let’s assign
the font to our H1 header via the test class name.</p>

<figure class='code'><figcaption><span>style.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@font-face</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">font-family</span><span class="o">:</span> <span class="nt">BebasNeue</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">src</span><span class="o">:</span> <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;https://s3.amazonaws.com/html5hacks/BebasNeue.otf&#39;</span><span class="o">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.test</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-family</span><span class="o">:</span> <span class="s1">&#39;BebasNeue&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we’ll open a browser and point to our newly created HTML page. In Opera (see
Figure 9-26), Safari, and Chrome our header tag is being styled correctly.</p>

<p>Figure 9-26. Opera browser showing the BebasNeue font</p>

<p><img class="figure" alt="Figure 9-26" src="http://jessecravens.com/images/chapter9-images/9-26.png"></p>

<p>But if we view it in Firefox, we are having issues (see Figure 9-27).</p>

<p>Figure 9-27. Firefox browser failing to show the BebasNeue font</p>

<p><img class="figure" alt="Figure 9-27" src="http://jessecravens.com/images/chapter9-images/9-27.png"></p>

<p>If we examine the request for our font in the Chrome Dev Tools Network tab, we will
see that the response from the server is empty (see Figure 9-28).</p>

<p>Figure 9-28. Firefox browser showing an empty response</p>

<p><img class="figure" alt="Figure 9-28" src="http://jessecravens.com/images/chapter9-images/9-28.png"></p>

<p>What gives? Well, by default, Firefox will only accept links from the same domain as
the host page. If we want to include fonts from different domains, we need to add an
Access-Control-Allow-Origin header to the font.</p>

<p>So, if you try to serve fonts from any CDN, Firefox will not load them.</p>

<h3>What Is CORS?</h3>

<p>The CORS specification uses the XMLHttpRequest object to send and receive headers
from the originating web page to a server that is properly configured in order to
enable cross-site requests.</p>

<p>The server accepting the request must respond with the
Access-Control-Allow-Origin header with either a wildcard (*) or the correct
origin domain sent by the originating web page as the value. If the value is not included,
the request will fail.</p>

<p>Furthermore, for HTTP methods other than GET or POST, such as PUT, a preflight request
is necessary, in which the browser sends an HTTP OPTIONS request to establish
a handshake with the server before accepting the PUT request.</p>

<p>Fortunately, after enough backlash from the development community, Amazon made
CORS configuration available on Amazon S3 via a very simple XML configuration.</p>

<p>Let’s get started.</p>

<h3>Configuring CORS at Amazon S3</h3>

<p>You should already be at your Amazon Management Console at http://
console.aws.amazon.com. Click on Properties→Permissions→Edit CORS configuration,
and you should receive a modal prompt.</p>

<p>The configuration can accept up to 100 rule definitions, but for our web font we will
only need a few. For this example we will use the wildcard, but if you are doing this in
production, you should whitelist the domains to prevent others from serving your font
from your S3 account on their own web pages. It wouldn’t be the end of the world, but
it might get costly.</p>

<p>The first rule allows cross-origin GET requests from any origin. The rule also allows all
headers in a preflight OPTIONS request through the
Access-Control-Request-Headers header. In response to any preflight OPTIONS
request, Amazon S3 will return any requested headers.</p>

<p>The second rule allows cross-origin GET requests from all origins. The * wildcard
character refers to all origins.</p>

<figure class='code'><figcaption><span>config.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;CORSConfiguration&gt;</span>
</span><span class='line'><span class="nt">&lt;CORSRule&gt;</span>
</span><span class='line'><span class="nt">&lt;AllowedOrigin&gt;</span>*/AllowedOrigin&gt;
</span><span class='line'><span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>
</span><span class='line'><span class="nt">&lt;/CORSRule&gt;</span>
</span><span class='line'><span class="nt">&lt;/CORSConfiguration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let’s add our new configuration to our Editor and save (see Figure 9-29).</p>

<p>Figure 9-29. Configuring CORS in the S3 Management Console</p>

<p><img class="figure" alt="Figure 9-29" src="http://jessecravens.com/images/chapter9-images/9-29.png"></p>

<p>Now, let’s return to Firefox and reload the page. We should now see the header font
styled with our BebasNeue web font, as shown in Figure 9-30.</p>

<p>Figure 9-30. Firefox browser successfully showing the BebasNeue font</p>

<p><img class="figure" alt="Figure 9-30" src="http://jessecravens.com/images/chapter9-images/9-30.png"></p>

<p>There is much more to learn about CORS, most notably, HTTP POST usage with certain
MIME types, and sending cookies and HTTP authentication data with requests if so
requested by the CORS-enabled server. So get out there and starting creating your
own CORS hacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upcoming Talk at Devcon5-Austin: Rapid Prototyping HTML5 Applications with NodeJS]]></title>
    <link href="http://jessecravens.com/blog/2012/09/25/upcoming-talk-at-devcon5-austin-rapid-prototyping-html5-applications-with-nodejs/"/>
    <updated>2012-09-25T21:50:00-05:00</updated>
    <id>http://jessecravens.com/blog/2012/09/25/upcoming-talk-at-devcon5-austin-rapid-prototyping-html5-applications-with-nodejs</id>
    <content type="html"><![CDATA[<p>I&#8217;m getting ready for an upcoming talk titled: Rapid Prototyping HTML5 Applications with NodeJS, which I will presenting at <a href="http://www.html5report.com/conference/austin2012/Agenda/Agenda-at-a-glance.aspx">Devcon 5 - Austin</a>.</p>

<p>Here is a brief summary:</p>

<p>With HTML5, the modern web browser continues to mature as a capable application platform.
The new specifications are broad, impacting nearly every technology associated with modern web development including graphics, connectivity, client-side storage, offline access, graphics, multimedia, and performance.
JavaScript continues to be front and center as the core language. NodeJS extends JavaScript&#8217;s event loop paradigm to the server, and provides JavaScript engineers with the ability to produce functionality deeper in the software stack. This phenomenon has had an impact on types of software development ranging from full-scale, enterprise, mobile applications to robot hobbyists platforms.
See innovative example solutions and learn why NodeJS is an ideal development platform for the production acceleration of next-generation HTML5 applications.</p>

<p>This is the beginning of a transition for me. With the release of HTML5 Hacks, I&#8217;m beginning to focus more on my ubiquitous JavaScript content. I&#8217;m excited, I have a lot to share.</p>

<p>Look for an update with a web based version of the slides.</p>

<script async class="speakerdeck-embed" data-id="507da9caa2a4030002063d67" data-ratio="1.299492385786802" src="http://jessecravens.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just moved HTML5 Hacks into Copy/Edit]]></title>
    <link href="http://jessecravens.com/blog/2012/09/24/just-moved-html5-hacks-into-copy-slash-edit/"/>
    <updated>2012-09-24T21:57:00-05:00</updated>
    <id>http://jessecravens.com/blog/2012/09/24/just-moved-html5-hacks-into-copy-slash-edit</id>
    <content type="html"><![CDATA[<p>After a marathon of hackery starting in April, <a href="http://www.oreillynet.com/pub/au/5370">Jeff Burtoft</a> and I pushed out 90 hacks and 435 pages of <a href="http://shop.oreilly.com/product/0636920026273.do">HTML5 Hacks</a> this week. We also had a few guest hackers that created some really great content as well.</p>

<ul>
<li>Raymond Camden of Adobe</li>
<li>Phil Legetter of Pusher.com</li>
<li>Alexander Schulze of jWebsocket</li>
<li><a href="http://j.hn/">John Dyer</a> of Dallas Theological Seminary</li>
<li>Alex Sirota of FoxyTunes</li>
</ul>


<p>Overall, it was a great experience. What I enjoyed the most was getting into a workflow groove, much like when you are building an API or contributing to a project. With each hack, it was necessary to ideate, plan, create the code, test it, and then put it into a understandable format. By the end, I was feeling pretty efficient at kicking out interesting hacks pretty quickly.</p>

<p>I felt as though I improved over time, looking back is always interesting. I like to keep fine tuning and revising, but at some point you have to ship the product. I&#8217;m really proud of the work, it has been hard, but I learned a ton in the process.</p>

<p>Most of my hacks I tried to make relevant to real world software development challenges, and mix in a number of HTML5 specifications. Hopefully, that turns out to benefit the reader &#8230; I&#8217;m all ears on the feedback. So don&#8217;t hesitate to drop us a line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migration from Drupal to Octopress]]></title>
    <link href="http://jessecravens.com/blog/2012/09/23/migration-from-drupal-to-octopress/"/>
    <updated>2012-09-23T13:39:00-05:00</updated>
    <id>http://jessecravens.com/blog/2012/09/23/migration-from-drupal-to-octopress</id>
    <content type="html"><![CDATA[<h2>Why?</h2>

<p>For the last 6 years, I have hosted my personal blog using Drupal at bluehost.com, and I finally have made the decision to migrate.</p>

<p>I have been using Ruby on Rails, Sinatra, and Node.js for prototypes, demos, web-based presentations, and production apps, and deploying to Heroku for the past couple of years. The productivity gains and integration with github and social media, have brought me to the point that I&#8217;d prefer for my workflow for blogging, updating to my microformats resume and portfolios to be similar to how I create and manage my other content.</p>

<p>So here, it is. Once I have written a proper migration script, and taken care of all the custom urls, I&#8217;ll post my solution here.</p>

<p>UPDATE:</p>

<div><script src='https://gist.github.com/3895430.js'></script>
<noscript><pre><code># inspired by: http://www.infovore.info/blog/2011/09/24/octopress-setup-and-drupal-migration/
# simplified to be dropped in your root Octopress app directory, along with an export (.sql) of your mysql db.

###### Creates post in this basic format ######

#  ---
#  layout: post
#  title: #{title}
#  date: #{time}
#  comments: true
#  categories: #{tag_list}
#  ---       
#  content

################################################


  require 'rubygems'
  require 'sequel'
  require 'fileutils'
  require 'yaml'


        puts &quot;Building refresh layout&quot;
        File.open(&quot;source/_layouts/refresh.html&quot;, &quot;w&quot;) do |f|
        f.puts &lt;&lt;EOF    
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url={{ page.refresh_to_post_id }}.html&quot; /&gt;
&lt;/head&gt;
&lt;/html&gt;
EOF
        end

        DB = Sequel.connect(:adapter =&gt; 'mysql', :user =&gt; 'root', :host =&gt; 'localhost', :database =&gt; 'jessecra',:password=&gt;'frog')
        puts DB.tables

        QUERY = &quot;select  node.nid, node.title, node_revisions.body, node.created, node.status, f.name as format, u.dst \
             from node \
                  join node_revisions on node.vid = node_revisions.vid \
                  join filter_formats f on node_revisions.format = f.format \
                  left join url_alias u on concat('node/', node.nid) = u.src \
             where (node.type = 'blog' OR node.type = 'story' OR node.type = 'article')&quot;

         DB[QUERY].each do |post|

            # Get required fields and construct Jekyll compatible name
            node_id = post[:nid]
            # puts node_id
            title = post[:title]
            puts title
            content = post[:body]
            # puts content
            created = post[:created]
            format = post[:format].strip.downcase == 'textile' ? 'textile' : 'markdown'
            dst  = post[:dst] || nil
            time = Time.at(created)
            is_published = post[:status] == 1
            published = is_published ? nil : false
            dir = &quot;source&quot;
            posts_dir = &quot;#{dir}/_posts&quot;
            slug = title.strip.downcase.gsub(/(&amp;|&amp;amp;)/, ' and ').gsub(/[\s\.\/\\]/, '-').gsub(/[^\w-]/, '').gsub(/[-_]{2,}/, '-').gsub(/^[-_]/, '').gsub(/[-_]$/, '')
            name = time.strftime(&quot;%Y-%m-%d-&quot;) + slug + '.' + format
            # puts name

            tag_query = &quot;select distinct node.nid, type, td.name \
                         from node \
                              join term_node tn on node.nid = tn.nid \
                              join term_data td on tn.tid = td.tid \
                         where node.nid = #{node_id} order by node.nid&quot;
            tags = []
            DB[tag_query].each do |tag|
              stripped_tag = tag[:name].gsub /&quot;/, '|'
              tags.push stripped_tag
            end
            tag_list = tags.length == 0 ? nil : tags
            
            puts tag_list

            # Write out the data and content to file
            File.open(&quot;#{posts_dir}/#{name}&quot;, &quot;w&quot;) do |f|
              f.puts &quot;---&quot;
              f.puts &quot;layout: post&quot;
              f.puts &quot;title: \&quot;#{title}\&quot;&quot; 
              f.puts &quot;date: #{time}&quot; 
              f.puts &quot;comments: true&quot;
              f.puts &quot;categories: #{tag_list}&quot;
              f.puts &quot;---&quot;
              f.puts content
            end

            # Make a file to redirect from the old Drupal URL
            if is_published
              FileUtils.mkdir_p(dir + &quot;/node/#{node_id}&quot;)
              File.open(dir + &quot;/node/#{node_id}/index.md&quot;, &quot;w&quot;) do |f|
                f.puts &quot;---&quot;
                f.puts &quot;layout: refresh&quot;
                f.puts &quot;refresh_to_post_id: /blog/#{time.strftime(&quot;%Y/%m/%d/&quot;) + slug}/index&quot;
                f.puts &quot;---&quot;
              end
              if dst
                FileUtils.mkdir_p(&quot;#{dir}/#{dst}&quot;)
                File.open(&quot;#{dir}/#{dst}/index.md&quot;, &quot;w&quot;) do |f|
                  f.puts &quot;---&quot;
                  f.puts &quot;layout: refresh&quot;
                  f.puts &quot;refresh_to_post_id: /blog/#{time.strftime(&quot;%Y/%m/%d/&quot;) + slug}/index&quot;
                  f.puts &quot;---&quot;
                end
              end
            end
          end</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Modules]]></title>
    <link href="http://jessecravens.com/blog/2012/06/17/javascript-modules/"/>
    <updated>2012-06-17T16:23:21-05:00</updated>
    <id>http://jessecravens.com/blog/2012/06/17/javascript-modules</id>
    <content type="html"><![CDATA[<p>For a talk last March at USAA&#8217;s internal Tech X conference, I put together a demo of JavaScript script loaders, module definitions, dependency management, and polyfill support: <a href="http://jessecravens.github.com/js-modules-demo">JavaScript Modules</a>.</p>


<p><a href="http://jessecravens.github.com/js-modules-demo/"><img class="imgL" width="500px" src="http://jessecravens.com/images/blogposts/js-modules.png"></a></p>

<p>This demonstrates the following Module Definitions:</p>




<ul>
<li>AMD</li>
<li>CommonJS</li>
<li>YUI3</li>
<li>JS Harmony</li>
</ul>




<p>And a few script loaders:</p>




<ul>
<li>RequireJS</li>
<li>yepnope</li>
<li>YUI3 - YUI Loader</li>
</ul>




<p>If you want to know more about the state of modules, dependency loading and management in the JavaScript world, there is always room for more contributors, just fork or clone the project &#8230; and you will have a playground to begin playing with some of the most popular implementations.</p>


<p>To learn more, check it out here: <a href="http://jessecravens.github.com/js-modules-demo/">jessecravens.github.com/js-modules-demo</a></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Robodeck]]></title>
    <link href="http://jessecravens.com/blog/2012/05/22/robodeck/"/>
    <updated>2012-05-22T10:01:42-05:00</updated>
    <id>http://jessecravens.com/blog/2012/05/22/robodeck</id>
    <content type="html"><![CDATA[<p>Awhile back, I built a websocket powered interactive presentation framework called <a href="https://github.com/jessecravens/robodeck">Robodeck</a>.</p>


<p>The solution uses the following technologies:</p>




<ul>
<li>Node.js</li>
<li>Socket.io</li>
<li>WebSockets</li>
<li>GeoLocation APIs</li>
<li>Deck.js</li>
</ul>




<p>To name a few.</p>


<p>To learn more, check it out here: <a href="http://jessecravens.github.com/robodeck">http://jessecravens.github.com/robodeck</a></p>


<p><a href="http://jessecravens.github.com/robodeck"><img class="imgL" width="500px" src="http://jessecravens.com/images/blogposts/robodeck.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Stylus’ Transparent Mixins to Hack Vendor-Specific Properties]]></title>
    <link href="http://jessecravens.com/blog/2012/04/22/hack-99-using-stylus-transparent-mixins-to-hack-vendor-specific-properties/"/>
    <updated>2012-04-22T19:11:35-05:00</updated>
    <id>http://jessecravens.com/blog/2012/04/22/hack-99-using-stylus-transparent-mixins-to-hack-vendor-specific-properties</id>
    <content type="html"><![CDATA[<p>One of the most interesting features of <a href="https://github.com/LearnBoost/stylus">Stylus</a> is transparent Mixins. One reason they are interesting is that at the time of this writing, this feature is exclusive to Stylus, other CSS metalanguages like Less and Sass do not offer Transparent Mixin support.</p>

<p>We already defined a mixin earlier, when we explored mixins with Jade. Here they are used similarly.</p>

<p>Before we begin with the transparent aspect of Stylus mixin support, let’s build a simple CSS mixin. Perhaps, the best example, as provided by TJ Holowaychuk in this <a href="http://www.screenr.com/bNY">beginner screencast</a> uses vendor-specific prefixes.</p>

<p>How about we take his example and expand it to a slightly more challenging scenario.</p>

<p>In case you haven’t come across this challenge before, lets set some context. Browser makers, or vendors, implement proprietary extensions to standard CSS specifications to release and test browser features that have been developed pre ‘Candidate Recommendation’ W3C draft status. Although vendor-specific prefixes can be frustrating for web developers, they are a necessary evil, allowing new properties to be widely tested before they become available as standard CSS properties.</p>

<p>Each Vendor maintains a list of their proprietary CSS properties. The following table provides the extension prefixes for all the modern browsers:</p>

<table border="1">
<tr>
<th>Extension</th>
<th>Rendering Engine</th>
<th>Browser(s)</th>
<th>Example</th>
</tr>
<tr>
<td>-moz-</td>
<td>Camino</td>
<td>Mozilla Firefox</td>
<td>-moz-border-radius</td>
</tr>
<tr>
<td>-ms-</td>
<td>Trident</td>
<td>Internet Explorer</td>
<td>-ms-layout-grid</td>
</tr>
<tr>
<td>-o-</td>
<td>Presto</td>
<td>Opera</td>
<td>-o-border-radius</td>
</tr>
<tr>
<td>-webkit-</td>
<td>Webkit</td>
<td>Chrome, Safari</td>
<td>-webkit-border-radius</td>
</tr>
</table>


<p>And here is a few valuable resources for finding these properties:</p>

<ul>
<li><a href="http://css-infos.net/properties/webkit">Webkit-unofficial at css-infos.net</a></li>
<li><a href="http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-SW1">Safari</a></li>
<li><a href="https://developer.mozilla.org/en/CSS_Reference/Mozilla_Extensions">Mozilla</a></li>
<li><a href="http://www.opera.com/docs/specs/presto28/css/o-vendor/">Opera</a></li>
<li><a href="http://blogs.msdn.com/b/ie/archive/2008/09/08/microsoft-css-vendor-extensions.aspx">Internet Explorer</a></li>
</ul>


<p>Without a metalanguage that provides logic to CSS, these declarations can become cumbersome and repetitive.
Here is an example of a div element that needs to have corners take on different size radiuses:</p>

<p>First, the markup in Jade.</p>

<figure class='code'><figcaption><span>example.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>header
</span><span class='line'>  h1= title
</span><span class='line'>  p Welcome to #{title}
</span><span class='line'>
</span><span class='line'>div.panel panel test
</span><span class='line'>div.mixin-panel mixin-panel test
</span><span class='line'>div.t-mixin-panel transparent-mixin-panel test
</span></code></pre></td></tr></table></div></figure>


<p>Then, the styles in basic CSS.</p>

<figure class='code'><figcaption><span>example.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span><span class="nc">.panel</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">10px</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">10px</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">10px</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This produces the following effect:</p>

<p><img src="http://jessecravens.com/images/blogposts/stylus-example265x185.png"/></p>

<p>With that context in mind, let’s leverage Stylus to help us manage our code. First, we are able to remove all parenthesis, semi-colons, and colons.</p>

<figure class='code'><figcaption><span>example2.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span><span class="nc">.panel</span>
</span><span class='line'>  <span class="nt">-moz-border-radius</span> <span class="nt">10px</span> <span class="nt">5px</span>
</span><span class='line'>  <span class="nt">-webkit-border-radius</span> <span class="nt">10px</span> <span class="nt">5px</span>
</span><span class='line'>  <span class="nt">border-radius</span> <span class="nt">10px</span> <span class="nt">5px</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much like Jade, this simplified syntax goes along way in our ability to quickly write CSS. Now, let’s apply some logic, by creating a border-radius mixin, and pass our values as arguments to our mixin:</p>

<figure class='code'><figcaption><span>example3.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">my-border-radius-mixin</span> <span class="o">(..</span><span class="nc">.args</span><span class="o">)</span>
</span><span class='line'>  <span class="nt">-moz-border-radius</span> <span class="nt">args</span>
</span><span class='line'>  <span class="nt">-webkit-border-radius</span> <span class="nt">args</span>
</span><span class='line'>  <span class="nt">border-radius</span> <span class="nt">args</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.panel</span>
</span><span class='line'>  <span class="nt">my-border-radius-mixin</span> <span class="o">(</span><span class="nt">10px</span> <span class="nt">5px</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can reuse this mixin in other contexts, which continues to help reduce code bloat and keep your code DRY.</p>

<figure class='code'><figcaption><span>example4.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">my-border-radius-mixin</span> <span class="o">(..</span><span class="nc">.args</span><span class="o">)</span>
</span><span class='line'>  <span class="nt">-moz-border-radius</span> <span class="nt">args</span>
</span><span class='line'>  <span class="nt">-webkit-border-radius</span> <span class="nt">args</span>
</span><span class='line'>  <span class="nt">border-radius</span> <span class="nt">args</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.panel</span>
</span><span class='line'>  <span class="nt">border-radius-mixin</span> <span class="o">(</span><span class="nt">10px</span> <span class="nt">5px</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.other-panel</span>
</span><span class='line'>  <span class="nt">border-radius-mixin</span> <span class="o">(</span><span class="nt">3px</span> <span class="nt">32px</span> <span class="nt">100px</span> <span class="nt">55px</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.another-panel</span>
</span><span class='line'>  <span class="nt">my-border-radius-mixin</span> <span class="o">(</span><span class="nt">5px</span> <span class="nt">10px</span> <span class="nt">33px</span> <span class="nt">43px</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While Stylus allows us to name our mixin as we choose, we are also given the ability to apply mixins ‘transparently.’ In the case of a simple implementation of border-radius, a transparent mixin would make a lot of sense. In effect, this normalizes browser implementations and provides an abstraction layer for CSS developers.</p>

<figure class='code'><figcaption><span>example5.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">border-radius</span> <span class="o">(..</span><span class="nc">.args</span><span class="o">)</span>
</span><span class='line'>  <span class="nt">-moz-border-radius</span> <span class="nt">args</span>
</span><span class='line'>  <span class="nt">-webkit-border-radius</span> <span class="nt">args</span>
</span><span class='line'>  <span class="nt">border-radius</span> <span class="nt">args</span>
</span><span class='line'>
</span><span class='line'><span class="nt">div</span><span class="nc">.panel</span>
</span><span class='line'>  <span class="nt">border-radius</span> <span class="nt">10px</span> <span class="nt">5px</span>
</span></code></pre></td></tr></table></div></figure>


<p>As long as a border-radius mixin is present, Stylus will find it, and apply the vendor-specific properties transparently.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Wokers: Basics of the Web Browser's UI Thread]]></title>
    <link href="http://jessecravens.com/blog/2011/12/11/hack-82-web-wokers-basics-of-the-web-browsers-ui-thread/"/>
    <updated>2011-12-11T11:08:01-06:00</updated>
    <id>http://jessecravens.com/blog/2011/12/11/hack-82-web-wokers-basics-of-the-web-browsers-ui-thread</id>
    <content type="html"><![CDATA[<h2>Single Threadin&#8217;</h2>

<p>As we set out to build a highly responsive UI for our demo web application, we must fully understand how browsers manage processes. Perhaps the biggest challenge we will face has to do with browsers using a single thread for both JavaScript execution and user interface updates. While the browser&#8217;s JavaScript interpreter is executing code, the UI is unable to respond to the user&#8217;s input. If a script is taking a long time to complete, after a specified amount of time the browser will provide the user an option to terminate the script. To accommodate for the &#8216;freeze&#8217; associated with scripts that exceed the browser execution time limit, web developers have traditionally created smaller units of work and used JavaScript timers to return execution to the next event in the queue. As you will see, web workers solve the locking of the UI thread by opening an additional thread, or even multiple threads, for execution of these long running, processor intensive tasks.</p>

<p>When designing your application, especially if you come from more of a &#8216;server-side&#8217; or Java background, it is important to understand that non-blocking execution is not the same as concurrent threading. While not extremely complex, JavaScript&#8217;s event driven style does take some getting used to for developers coming from other languages such as Java and C. Later, we will touch on a few examples where we pass a callback continuation function to take full advantage of JavaScript&#8217;s non blocking design.</p>

<h2>Thread Safety</h2>

<p>Mozilla, in particular, provides a Worker interface which web workers implement. While the Worker interface spawns OS-level threads, web workers use the postMessage mechanism to send messages (with serializable objects) between the two execution contexts. To ensure thread safety the worker is only given access to thread safe components to include the following:</p>

<ul>
<li>timers: setTimeout() and setInterval() methods</li>
<li>XMLHttpRequest</li>
<li>importScripts() method</li>
</ul>


<p>The worker script can also make use of:</p>

<ul>
<li>navigator and location objects</li>
<li>native JavaScript objects such as Object, String, Date</li>
</ul>


<p>At the same time, the worker restricts access to DOM APIs, global variables, and the parent page. In Hack #84 Building the DOM with web workers and Handlebars.js, we will explore the restricted access to DOM APIs, and introduce JavaScript templating, importScripts, and the use of timers to poll for postMessage.</p>

<h2>HTML5 Web Workers</h2>

<p>As mentioned earlier, the Web worker spec defines an API for executing scripts in the background by spawning an independent execution context.</p>

<p>It is important to note that web workers are costly, having an impact on startup and overall memory consumption. So, they are intended to be used lightly and in conjunction with the some of the asynchronous techniques mentioned earlier. A well built client-side application would typically make use of one or two cases where tasks are expensive. Here are a few common uses cases:</p>

<ul>
<li>Single Page Application bootstrapping large amounts of data during initial load</li>
<li>Performing long running mathematical calculations in the browser</li>
<li>Processing large JSON datasets</li>
<li>Text formatting, spell checking, and syntax highlighting</li>
<li>Processing multimedia data (Audio/Video)</li>
<li>Long polling webservices</li>
<li>Filtering images in canvas</li>
<li>Calculating points for a 3D image</li>
<li>Reading/Writing of local storage database</li>
</ul>


<h2>Long Running Scripts</h2>

<p>Our first web worker hack will be a long running script with heavy computation. It will execute 2 loops that output a two-dimensional array. First, we will use this computation to lock up the browser&#8217;s UI thread, and later we will move the task to a worker.</p>

<figure class='code'><figcaption><span>init.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">r</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">c</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;[&quot;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">j</span> <span class="o">+</span> <span class="s2">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">init</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Spawning a Worker</h2>

<p>Now let&#8217;s move our heavy computational task to a dedicated web worker, so that the user doesn&#8217;t have to wait for the script to complete execution in order to interact with user interface. First, lets spawn a new worker:</p>

<figure class='code'><figcaption><span>spawn.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">&#39;highComp.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">message</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){},</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we define an external file that will contain the logic of our heavy computational task. The file, highComp.js will listen for a message that will receive the serialized JSON payload, and then we will set up an additional listener to receive a message back from highComp.js.</p>

<p>Now, we can move this cpu-intensive task to a separate file: highComp.js</p>

<figure class='code'><figcaption><span>highComp.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">r</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">c</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;[&quot;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">j</span> <span class="o">+</span> <span class="s2">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">postMessage</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In highComp.js, our two dimensional array is built and set to variable a. It is then passed back to our main script via the postMessage call.</p>

<p>In the next hack, we will mix our use of timers with the power of a dedicated worker. As we send messages (passing serializable objects as a parameter to postMessage) back and forth to code running in the shared UI thread, our timer will periodically send and check for new messages and use their contents to modify the DOM.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM (Ruby Version Manager) and Ruby On Rails]]></title>
    <link href="http://jessecravens.com/blog/2011/09/26/rvm-ruby-version-manager-and-ruby-on-rails/"/>
    <updated>2011-09-26T23:35:58-05:00</updated>
    <id>http://jessecravens.com/blog/2011/09/26/rvm-ruby-version-manager-and-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Here is a brief overview of <a href="http://beginrescueend.com">Ruby Version Manager</a> and some explanation as to why you would want to use it. I began to use RVM when I started my first Rails 3 project. It was a bit confusing at first, but now I couldn&#8217;t live without it. I have created numerous gemsets for various configurations to include different versions of Ruby (1.87 and 1.91), versions of Rails (2.3, 3.09, 3.1) and different projects that have vastly different gems such as different testing frameworks, different JavaScript libraries, and different ORMs.</p>

<p>This allows me to essentially sandbox each of these applications&#8217; dependencies.</p>

<p>One helpful hint I might offer is to get in the habit of declaring your gemset when you launch a new terminal. I tend to have multiple terminals open at once and it took me awhile to remember that each time I launched a terminal, RVM would fall back to my default gemset. So if I clone a Rails 3.1 project, I need to remember to switch to my rails3.1 gemset prior to runninig bundle install.</p>

<p>Simply put, RVM helps:</p>

<ul>
<li>manage versions of Ruby</li>
<li>manage packages of Gemsets</li>
</ul>


<h2>RUBY</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm list
</span><span class='line'>$ rvm install 1.9.2-head</span></code></pre></td></tr></table></div></figure>


<p>And, you can set a version as default</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use 1.9.2-head --default</span></code></pre></td></tr></table></div></figure>


<h3>GEMSETS</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Start by creating our gemset(s):
</span><span class='line'>
</span><span class='line'>$  rvm gemset create rails309
</span><span class='line'>
</span><span class='line'># Or create multiple at a time:
</span><span class='line'>
</span><span class='line'>$  rvm gemset create rails307 rails31
</span><span class='line'>
</span><span class='line'># The result can be verified by listing the available gemsets:
</span><span class='line'>
</span><span class='line'>$  rvm gemset list
</span><span class='line'>
</span><span class='line'># See everything with list_all, this has been very useful:
</span><span class='line'>
</span><span class='line'>$ rvm gemset list_all
</span><span class='line'>
</span><span class='line'># If a gem’s name still leaves room for confusion, simply delete it and create a more meaningful one (e.g., rails31rc):
</span><span class='line'>
</span><span class='line'>$  rvm gemset delete rails31</span></code></pre></td></tr></table></div></figure>


<p>Now that we have multiple gemsets installed, we must first select the one we want to use, and we can also set it as the default gemset by passing it the —default flag:
  </p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use 1.9.2-head@rails309 --default</span></code></pre></td></tr></table></div></figure>


<h3>Installing Rails</h3>

<p>Installing rails is as easy as installing any other gem: we only need to specify it’s name, but we can always choose a specific version, or to speed up the installation process by skipping the documentation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install rails --no-rdoc --no-ri
</span><span class='line'># Or
</span><span class='line'>$ gem install rails [-v 3.0.7] [--no-rdoc --no-ri]
</span><span class='line'># Or
</span><span class='line'>$ gem install rails -v ">=3.1.0rc"</span></code></pre></td></tr></table></div></figure>


<h3>In Summary and Why Am I doing this?</h3>

<p>Rails is distributed as a gem, and there are conflicts between Rails 2 and Rails 3, so if you want to run multiple versions of Rails on the same system you need to create a separate gemset for each:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm --create 1.8.7-p302@rails2app
</span><span class='line'>$ rvm --create use 1.9.2@rails3app</span></code></pre></td></tr></table></div></figure>


<p>In other words, for application specific gemsets it is convenient to select the version of Ruby and the collection of gems by doing the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm --create use 1.9.2@mongoid-app
</span><span class='line'>
</span><span class='line'># Also, which gemset am I using?
</span><span class='line'>$ rvm gemset name
</span><span class='line'>
</span><span class='line'>$ rvm gemdir</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Cheatsheet]]></title>
    <link href="http://jessecravens.com/blog/2011/09/26/git-cheatsheet/"/>
    <updated>2011-09-26T23:10:56-05:00</updated>
    <id>http://jessecravens.com/blog/2011/09/26/git-cheatsheet</id>
    <content type="html"><![CDATA[<p>I made the switch from Subversion to Git awhile back, and early on I created a cheatsheet pulled from various sources on the web. I thought I&#8217;d share.</p>

<h3>Git First-Time System Setup</h3>

<p>After installing Git, you should perform a set of one-time setup steps. These are system setups, meaning you only have to do them once per computer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install git-core
</span><span class='line'>$ git config --global user.email youremail[at symbol]example.com
</span><span class='line'>$ git config --global user.name "Your Name"
</span><span class='line'>$ git config --global alias.co checkout</span></code></pre></td></tr></table></div></figure>


<p>As a final setup step, you can optionally set the editor Git will use for commit messages.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global core.editor "mate -w"
</span><span class='line'>
</span><span class='line'># Replace “mate -w” with “gvim -f” for gVim or “mvim -f” for MacVim.</span></code></pre></td></tr></table></div></figure>


<h3>Quick Reference – Most Often Used Commands</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /path/to/repository
</span><span class='line'>$ git init
</span><span class='line'>$ git add .
</span><span class='line'>$ git add -u
</span><span class='line'>$ git log
</span><span class='line'>$ git status
</span><span class='line'>$ git commit -m "initial commit"
</span><span class='line'>
</span><span class='line'># made a mistake on the git commit
</span><span class='line'>$ git commit -amend -m "initial commit"
</span><span class='line'>
</span><span class='line'># Add the remote repository
</span><span class='line'>
</span><span class='line'># ex 1
</span><span class='line'>$ git remote add unfuddle git@subdomain.unfuddle.com:subdomain/abbreviation.git
</span><span class='line'>
</span><span class='line'># ex 2
</span><span class='line'>$ git remote add origin git@subdomain.unfuddle.com:subdomain/abbreviation.git
</span><span class='line'>
</span><span class='line'># Configure the repository
</span><span class='line'>$ git config remote.unfuddle.push refs/heads/master:refs/heads/master
</span><span class='line'>
</span><span class='line'># Push master branch to remote repository named unfuddle
</span><span class='line'>$ git push unfuddle master
</span><span class='line'>
</span><span class='line'># Other commands:
</span><span class='line'>
</span><span class='line'># Clone an existing remote repo 
</span><span class='line'>$ git clone git@subdomain.unfuddle.com:subdomain/abbreviation.git
</span><span class='line'>
</span><span class='line'># List all branches within your repo
</span><span class='line'>$ git branch -a
</span><span class='line'>
</span><span class='line'>#Create and switch to a new branch "whatever"
</span><span class='line'>$ git checkout -b whatever</span></code></pre></td></tr></table></div></figure>


<p>Those are the basics, should be enough to make you dangerous.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YUI3 Rails Application Template]]></title>
    <link href="http://jessecravens.com/blog/2011/01/30/yui3-rails-application-template/"/>
    <updated>2011-01-30T01:02:15-06:00</updated>
    <id>http://jessecravens.com/blog/2011/01/30/yui3-rails-application-template</id>
    <content type="html"><![CDATA[<p>I decided to put together a Rails template to generate a quick sqlite3 db driven web app to test out <a href="http://developer.yahoo.com/yui/3/">YUI3</a> functionality quickly. Rails 3 makes it super simple to quickly generate real JSON data for testing out various YUI 3 components such as DataSource.</p>

<p>The template takes care of removing the Prototype library, including yui-debug.js and the CSS framework including reset, and the new <a href="http://developer.yahoo.com/yui/3/cssgrids/">Grids</a> - currently in beta. I also wanted to deliver my basic markup quickly so I&#8217;ve added <a href="http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html#html_elements">Haml</a></p>

<p>Since I have been disciplining myself to follow Test Driven Development on the server, I included all of my Rails testing dependencies in the app template as well (RSpec, Cucumber, WebRat, Factory Girl) and I plan to continue to leverage <a href="http://developer.yahoo.com/yui/3/test/">YUI Test</a> on the client as I run through browser validations of the <a href="http://developer.yahoo.com/yui/3/examples/datasource/datasource_polling.html">datasource-polling sub-module</a>. Clone the rails app template <a href="https://github.com/jessecravens/yui3-rails-template">here</a>.</p>

<figure class='code'><figcaption><span>yui-rails.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># YUI3 Application Generator Template</span>
</span><span class='line'><span class="c1"># Generates a Rails app; includes YUI3, Haml, RSpec, Cucumber, WebRat, Factory Girl ...</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Generating a new YUI3 Rails app&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Create the database</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;creating the database...&quot;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rake db:create:all&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># GIT</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;setting up &#39;git&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">append_file</span> <span class="s1">&#39;.gitignore&#39;</span> <span class="k">do</span> <span class="o">&lt;&lt;-</span><span class="no">FILE</span>
</span><span class='line'><span class="sh">&#39;.DS_Store&#39;</span>
</span><span class='line'><span class="sh">&#39;.rvmrc&#39;</span>
</span><span class='line'><span class="no">FILE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">git</span> <span class="ss">:init</span>
</span><span class='line'><span class="n">git</span> <span class="ss">:add</span> <span class="o">=&gt;</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'><span class="n">git</span> <span class="ss">:commit</span> <span class="o">=&gt;</span> <span class="s2">&quot;-m &#39;Initial Commit of YUI3 Rails App&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Remove files</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;removing files...&quot;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm public/index.html&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm public/favicon.ico&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm public/images/rails.png&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm README&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;touch README&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;banning spiders from your site by changing robots.txt...&quot;</span>
</span><span class='line'><span class="n">gsub_file</span> <span class="s1">&#39;public/robots.txt&#39;</span><span class="p">,</span> <span class="sr">/# User-Agent/</span><span class="p">,</span> <span class="s1">&#39;User-Agent&#39;</span>
</span><span class='line'><span class="n">gsub_file</span> <span class="s1">&#39;public/robots.txt&#39;</span><span class="p">,</span> <span class="sr">/# Disallow/</span><span class="p">,</span> <span class="s1">&#39;Disallow&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Haml </span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;setting up Gemfile for Haml...&quot;</span>
</span><span class='line'>  <span class="n">append_file</span> <span class="s1">&#39;Gemfile&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2"># Bundle gems needed for Haml</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;haml&#39;</span><span class="p">,</span> <span class="s1">&#39;3.0.18&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;haml-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;0.2&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Set up YUI3</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;replacing Prototype with YUI3&quot;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm public/javascripts/controls.js&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm public/javascripts/dragdrop.js&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm public/javascripts/effects.js&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm public/javascripts/prototype.js&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm public/javascripts/rails.js&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s2">&quot;http://yui.yahooapis.com/combo?3.3.0/build/yui/yui-debug.js&quot;</span><span class="p">,</span>  <span class="s2">&quot;public/javascripts/yui-debug.js&quot;</span>
</span><span class='line'><span class="n">get</span> <span class="s2">&quot;http://yui.yahooapis.com/3.3.0/build/cssreset/reset.css&quot;</span><span class="p">,</span>  <span class="s2">&quot;public/stylesheets/reset.css&quot;</span>
</span><span class='line'><span class="n">get</span> <span class="s2">&quot;http://yui.yahooapis.com/3.3.0/build/cssbase/base.css&quot;</span><span class="p">,</span>  <span class="s2">&quot;public/stylesheets/base.css&quot;</span>
</span><span class='line'><span class="n">get</span> <span class="s2">&quot;http://yui.yahooapis.com/3.3.0/build/cssfonts/fonts.css&quot;</span><span class="p">,</span>  <span class="s2">&quot;public/stylesheets/fonts.css&quot;</span>
</span><span class='line'><span class="n">get</span> <span class="s2">&quot;http://yui.yahooapis.com/3.3.0/build/cssgrids/grids.css&quot;</span><span class="p">,</span>  <span class="s2">&quot;public/stylesheets/grids.css&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Create an index page</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;create a home controller and view&quot;</span>
</span><span class='line'><span class="n">generate</span><span class="p">(</span><span class="ss">:controller</span><span class="p">,</span> <span class="s2">&quot;home index&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">gsub_file</span> <span class="s1">&#39;config/routes.rb&#39;</span><span class="p">,</span> <span class="sr">/get \&quot;home\/index\&quot;/</span><span class="p">,</span> <span class="s1">&#39;root :to =&gt; &quot;home#index&quot;&#39;</span>
</span><span class='line'><span class="n">append_file</span> <span class="s1">&#39;app/views/home/index.html.haml&#39;</span><span class="k">do</span> <span class="o">&lt;&lt;-</span><span class="no">FILE</span>
</span><span class='line'><span class="sh">!!!</span>
</span><span class='line'><span class="sh">%h2{:class =&gt; &quot;subtitle&quot;} Get Started</span>
</span><span class='line'><span class="sh">%p{:class =&gt; &quot;content&quot;} Update application.js with your logic</span>
</span><span class='line'><span class="sh">%div{:class =&gt; &quot;container&quot;, :id =&gt; &quot;container&quot;}</span>
</span><span class='line'><span class="sh">%div{:id =&gt; &quot;testLogger&quot;}</span>
</span><span class='line'><span class="no">FILE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Generate Application Layout</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rm app/views/layouts/application.html.erb&#39;</span>
</span><span class='line'>  <span class="n">create_file</span> <span class="s1">&#39;app/views/layouts/application.html.haml&#39;</span> <span class="k">do</span> <span class="o">&lt;&lt;-</span><span class="no">FILE</span>
</span><span class='line'><span class="sh">!!!</span>
</span><span class='line'><span class="sh">%html</span>
</span><span class='line'><span class="sh">  %head</span>
</span><span class='line'><span class="sh">    %title YUI3 App</span>
</span><span class='line'><span class="sh">    = stylesheet_link_tag &quot;reset&quot;</span>
</span><span class='line'><span class="sh">    = stylesheet_link_tag &quot;base&quot;</span>
</span><span class='line'><span class="sh">    = stylesheet_link_tag &quot;fonts&quot;</span>
</span><span class='line'><span class="sh">    = stylesheet_link_tag &quot;grids&quot;</span>
</span><span class='line'><span class="sh">    = stylesheet_link_tag &quot;application&quot;</span>
</span><span class='line'><span class="sh">    = javascript_include_tag :all</span>
</span><span class='line'><span class="sh">    = csrf_meta_tag</span>
</span><span class='line'><span class="sh">  %body{:class =&gt;&quot;yui3-skin-sam  yui-skin-sam&quot;}</span>
</span><span class='line'><span class="sh">    = yield</span>
</span><span class='line'><span class="no">FILE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Add Stylesheets</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">create_file</span> <span class="s1">&#39;public/stylesheets/application.css&#39;</span> <span class="k">do</span> <span class="o">&lt;&lt;-</span><span class="no">FILE</span>
</span><span class='line'><span class="sh">div.container {</span>
</span><span class='line'><span class="sh">  width: 100%;</span>
</span><span class='line'><span class="sh">  height: 100px; </span>
</span><span class='line'><span class="sh">  padding: 10px;</span>
</span><span class='line'><span class="sh">  margin: 10px;</span>
</span><span class='line'><span class="sh">  border: 1px solid red;</span>
</span><span class='line'><span class="sh">}</span>
</span><span class='line'>
</span><span class='line'><span class="sh">#testLogger {</span>
</span><span class='line'><span class="sh">    margin-bottom: 1em;</span>
</span><span class='line'><span class="sh">}</span>
</span><span class='line'>
</span><span class='line'><span class="sh">#testLogger .yui3-console .yui3-console-title {</span>
</span><span class='line'><span class="sh">    border: 0 none;</span>
</span><span class='line'><span class="sh">    color: #000;</span>
</span><span class='line'><span class="sh">    font-size: 13px;</span>
</span><span class='line'><span class="sh">    font-weight: bold;</span>
</span><span class='line'><span class="sh">    margin: 0;</span>
</span><span class='line'><span class="sh">    text-transform: none;</span>
</span><span class='line'><span class="sh">}</span>
</span><span class='line'><span class="sh">#testLogger .yui3-console .yui3-console-entry-meta {</span>
</span><span class='line'><span class="sh">    margin: 0;</span>
</span><span class='line'><span class="sh">}</span>
</span><span class='line'>
</span><span class='line'><span class="sh">.yui3-skin-sam .yui3-console-entry-pass .yui3-console-entry-cat {</span>
</span><span class='line'><span class="sh">    background: #070;</span>
</span><span class='line'><span class="sh">    color: #fff;</span>
</span><span class='line'><span class="sh">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">FILE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Initialize YUI and add YUI Test</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">append_file</span> <span class="s1">&#39;public/javascripts/application.js&#39;</span> <span class="k">do</span> <span class="o">&lt;&lt;-</span><span class="no">FILE</span>
</span><span class='line'><span class="sh">  </span>
</span><span class='line'><span class="sh">  YUI({ filter: &#39;raw&#39; }).use(&quot;node&quot;, &quot;console&quot;, &quot;test&quot;,function (Y) {</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      Y.namespace(&quot;example.test&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      Y.example.test.DataTestCase = new Y.Test.Case({</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          //name of the test case - if not provided, one is auto-generated</span>
</span><span class='line'><span class="sh">          name : &quot;Data Tests&quot;,</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          //---------------------------------------------------------------------</span>
</span><span class='line'><span class="sh">          // setUp and tearDown methods - optional</span>
</span><span class='line'><span class="sh">          //---------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          /*</span>
</span><span class='line'><span class="sh">           * Sets up data that is needed by each test.</span>
</span><span class='line'><span class="sh">           */</span>
</span><span class='line'><span class="sh">          setUp : function () {</span>
</span><span class='line'><span class="sh">              this.data = {</span>
</span><span class='line'><span class="sh">                  name: &quot;test&quot;,</span>
</span><span class='line'><span class="sh">                  year: 2007,</span>
</span><span class='line'><span class="sh">                  beta: true</span>
</span><span class='line'><span class="sh">              };</span>
</span><span class='line'><span class="sh">          },</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          /*</span>
</span><span class='line'><span class="sh">           * Cleans up everything that was created by setUp().</span>
</span><span class='line'><span class="sh">           */</span>
</span><span class='line'><span class="sh">          tearDown : function () {</span>
</span><span class='line'><span class="sh">              delete this.data;</span>
</span><span class='line'><span class="sh">          },</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          //---------------------------------------------------------------------</span>
</span><span class='line'><span class="sh">          // Test methods - names must begin with &quot;test&quot;</span>
</span><span class='line'><span class="sh">          //---------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          testName : function () {</span>
</span><span class='line'><span class="sh">              var Assert = Y.Assert;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              Assert.isObject(this.data);</span>
</span><span class='line'><span class="sh">              Assert.isString(this.data.name);</span>
</span><span class='line'><span class="sh">              Assert.areEqual(&quot;test&quot;, this.data.name);            </span>
</span><span class='line'><span class="sh">          },</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          testYear : function () {</span>
</span><span class='line'><span class="sh">              var Assert = Y.Assert;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              Assert.isObject(this.data);</span>
</span><span class='line'><span class="sh">              Assert.isNumber(this.data.year);</span>
</span><span class='line'><span class="sh">              Assert.areEqual(2007, this.data.year);            </span>
</span><span class='line'><span class="sh">          },</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          testBeta : function () {</span>
</span><span class='line'><span class="sh">              var Assert = Y.Assert;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              Assert.isObject(this.data);</span>
</span><span class='line'><span class="sh">              Assert.isBoolean(this.data.beta);</span>
</span><span class='line'><span class="sh">              Assert.isTrue(this.data.beta);</span>
</span><span class='line'><span class="sh">          }</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      });</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      Y.example.test.ArrayTestCase = new Y.Test.Case({</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          //name of the test case - if not provided, one is auto-generated</span>
</span><span class='line'><span class="sh">          name : &quot;Array Tests&quot;,</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          //---------------------------------------------------------------------</span>
</span><span class='line'><span class="sh">          // setUp and tearDown methods - optional</span>
</span><span class='line'><span class="sh">          //---------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          /*</span>
</span><span class='line'><span class="sh">           * Sets up data that is needed by each test.</span>
</span><span class='line'><span class="sh">           */</span>
</span><span class='line'><span class="sh">          setUp : function () {</span>
</span><span class='line'><span class="sh">              this.data = [0,1,2,3,4]</span>
</span><span class='line'><span class="sh">          },</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          /*</span>
</span><span class='line'><span class="sh">           * Cleans up everything that was created by setUp().</span>
</span><span class='line'><span class="sh">           */</span>
</span><span class='line'><span class="sh">          tearDown : function () {</span>
</span><span class='line'><span class="sh">              delete this.data;</span>
</span><span class='line'><span class="sh">          },</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          //---------------------------------------------------------------------</span>
</span><span class='line'><span class="sh">          // Test methods - names must begin with &quot;test&quot;</span>
</span><span class='line'><span class="sh">          //---------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          testPop : function () {</span>
</span><span class='line'><span class="sh">              var Assert = Y.Assert;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              var value = this.data.pop();</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              Assert.areEqual(4, this.data.length);</span>
</span><span class='line'><span class="sh">              Assert.areEqual(4, value);            </span>
</span><span class='line'><span class="sh">          },        </span>
</span><span class='line'>
</span><span class='line'><span class="sh">          testPush : function () {</span>
</span><span class='line'><span class="sh">              var Assert = Y.Assert;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              this.data.push(5);</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              Assert.areEqual(6, this.data.length);</span>
</span><span class='line'><span class="sh">              Assert.areEqual(5, this.data[5]);            </span>
</span><span class='line'><span class="sh">          },</span>
</span><span class='line'>
</span><span class='line'><span class="sh">          testSplice : function () {</span>
</span><span class='line'><span class="sh">              var Assert = Y.Assert;</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              this.data.splice(2, 1, 6, 7);</span>
</span><span class='line'>
</span><span class='line'><span class="sh">              Assert.areEqual(6, this.data.length);</span>
</span><span class='line'><span class="sh">              Assert.areEqual(6, this.data[2]);           </span>
</span><span class='line'><span class="sh">              Assert.areEqual(7, this.data[3]);           </span>
</span><span class='line'><span class="sh">          }</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      });    </span>
</span><span class='line'>
</span><span class='line'><span class="sh">      Y.example.test.ExampleSuite = new Y.Test.Suite(&quot;Example Suite&quot;);</span>
</span><span class='line'><span class="sh">      Y.example.test.ExampleSuite.add(Y.example.test.DataTestCase);</span>
</span><span class='line'><span class="sh">      Y.example.test.ExampleSuite.add(Y.example.test.ArrayTestCase);</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      //create the console</span>
</span><span class='line'><span class="sh">      var r = new Y.Console({</span>
</span><span class='line'><span class="sh">          newestOnTop : false,</span>
</span><span class='line'><span class="sh">          style: &#39;block&#39; // to anchor in the example content</span>
</span><span class='line'><span class="sh">      });</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      r.render(&#39;#testLogger&#39;);</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      Y.Test.Runner.add(Y.example.test.ExampleSuite);</span>
</span><span class='line'>
</span><span class='line'><span class="sh">      //run the tests</span>
</span><span class='line'><span class="sh">      Y.Test.Runner.run();</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  });</span>
</span><span class='line'>
</span><span class='line'><span class="no">FILE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Setup RSpec &amp; Cucumber</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;Setting up RSpec, Cucumber, webrat, factory_girl, faker&#39;</span>
</span><span class='line'><span class="n">append_file</span> <span class="s1">&#39;Gemfile&#39;</span> <span class="k">do</span> <span class="o">&lt;&lt;-</span><span class="no">FILE</span>
</span><span class='line'><span class="sh">group :development, :test do</span>
</span><span class='line'><span class="sh">  gem &quot;rspec-rails&quot;, &quot;&gt;= 2.0.1&quot;</span>
</span><span class='line'><span class="sh">  gem &quot;cucumber-rails&quot;, &quot;&gt;= 0.3.2&quot;</span>
</span><span class='line'><span class="sh">  gem &quot;webrat&quot;, &quot;&gt;= 0.7.2.beta.2&quot;</span>
</span><span class='line'><span class="sh">  gem &quot;factory_girl_rails&quot;</span>
</span><span class='line'><span class="sh">  gem &quot;faker&quot;</span>
</span><span class='line'><span class="sh">end</span>
</span><span class='line'><span class="no">FILE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;bundle install&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;script/rails generate rspec:install&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;script/rails generate cucumber:install&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rake db:migrate&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;rake db:test:prepare&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;touch spec/factories.rb&#39;</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1"># Finish up</span>
</span><span class='line'><span class="c1">#----------------------------------------------------------------------------</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Commiting to Git repository...&quot;</span>
</span><span class='line'><span class="n">git</span> <span class="ss">:add</span> <span class="o">=&gt;</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'><span class="n">git</span> <span class="ss">:commit</span> <span class="o">=&gt;</span> <span class="s2">&quot;-am &#39;Setup Complete&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;DONE - setting up your YUI3 Rails App.&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El Nino, French Fries, Chippendale with Swayze, but do you remember this one? Chris Farley as Christian Laettner]]></title>
    <link href="http://jessecravens.com/blog/2010/10/18/el-nino-french-fries-chippendale-with-swayze-but-do-you-remember-this-one-chris-farley-as-christian-laettner/"/>
    <updated>2010-10-18T18:48:09-05:00</updated>
    <id>http://jessecravens.com/blog/2010/10/18/el-nino-french-fries-chippendale-with-swayze-but-do-you-remember-this-one-chris-farley-as-christian-laettner</id>
    <content type="html"><![CDATA[<p>El Nino, French Fries, Chippendale with Swayze, but do you remember this one?</p>


<object width="480" height="385"><param name="movie" value="http://www.youtube.com/v/bPMo14XTTvE?fs=1&amp;hl=en_US"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/bPMo14XTTvE?fs=1&amp;hl=en_US" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="480" height="385"></embed></object>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Researching the Latest in HTPC (Home Theater PC)]]></title>
    <link href="http://jessecravens.com/blog/2010/01/30/researching-the-latest-in-htpc-home-theater-pc/"/>
    <updated>2010-01-30T19:30:56-06:00</updated>
    <id>http://jessecravens.com/blog/2010/01/30/researching-the-latest-in-htpc-home-theater-pc</id>
    <content type="html"><![CDATA[<p>Fed up with paying for lame content, we recently turned off our cable and turned in our DVR.<br />Since then, I have been doing my research and preparing to build or purchase a system that leverages our broadband connection and Local HD Channels for content.<br /><br />Here is my growing list of resources: <br /><b><br />General Information</b><br /><ul><li><a href="http://en.wikipedia.org/wiki/Home_theater_PC">Home theater PC - Wikipedia, the free encyclopedia</a></li></ul><br /><b>Articles</b><br /><ul><li><a href="http://gizmodo.com/5366161/life-without-cable-or-satellite-tv-is-easier-than-you-think">Life Without Cable or Satellite TV Is Easier Than You Think - Htpc - Gizmodo</a></li><li><a href="http://gizmodo.com/5420853/why-its-finally-time-to-get-a-home-theater-pc">Why It&#8217;s Finally Time To Get a Home Theater PC - Htpc - Gizmodo</a></li><li><a href="http://www.extremetech.com/article2/0,2845,2349560,00.asp">Mini-Roundup: The Best New HTPC Cases - Chieftec HM-02 - CPUs, Boards &amp; Components by ExtremeTech</a></li><li><a href="http://www.engadget.com/2009/11/12/dells-inspiron-zino-hd-on-sale-now-in-america-starts-at-229/">Dell&#8217;s Inspiron Zino HD on sale now in America: starts at $229, doubles as an HTPC &#8211; Engadget</a></li><li><a href="http://www.engadget.com/2009/07/21/how-to-build-a-blu-ray-tv-tuner-equipped-htpc-for-under-1-00/">How-to: Build a Blu-ray / TV tuner-equipped HTPC for under $1,000 &#8211; Engadget</a></li><li><a href="http://sewelldirect.com/articles/vga-to-hdmi.aspx">Convert VGA to HDMI with Audio (HDMI to VGA)</a></li></ul>      <br /><b>Videos</b><br /><ul><li><a href="http://www.howcast.com/videos/185705-How-To-Connect-Your-Laptop-To-Your-Television">How To Connect Your Laptop To Your Television Video | Laptop Computers Videos | Howcast.com</a></li><li><a href="http://www.youtube.com/watch?v=5c9-LLY33Gw">YouTube - CES 2010 - Core i5 is the new HTPC powerhouse</a></li></ul><br /><b>Channels</b><br /><ul><li><a href="http://www.hulu.com/">Hulu - Watch your favorites. Anytime. For free.</a></li><li><a href="http://www.fancast.com/">Fancast | Watch Full TV Shows and Movies | Free Online Streaming</a></li><li><a href="http://www.joost.com/epg/us/shows/">Shows - Featured - United States - Joost</a></li><li><a href="http://www.clicker.com/">Clicker - What&#8217;s On Online</a></li></ul>   <br /><b>On Demand Content</b><br /><ul><li><a href="http://www.amazon.com/Video-On-Demand/b/ref=topnav_storetab_atv?ie=UTF8&amp;node=16261631">Amazon.com Video On Demand: TV shows, movies, international videos and more, ready to download</a></li></ul> <br /><b>Players </b><br /><ul><li><a href="http://www.roku.com/">Roku Digital Video Player | Watch Netflix, Amazon Video On Demand and MLB.TV on Roku Player</a></li><li><a href="http://www.vudu.com/noscript.html">VUDU - Turn Javscript On Please</a></li></ul> <b><br />Hardware - All In One</b><br /><ul><li><a href="http://usa.asus.com/product.aspx?P_ID=wH1q2VTqyLXaCw1f">ASUSTeK Computer Inc. EeeBox PC EB1012</a></li><li><a href="http://www.dell.com/us/en/corp/desktops/inspiron-zino-hd/pd.aspx?refid=inspiron-zino-hd&amp;s=corp">Inspiron Zino HD Desktop | Dell</a></li><li><a href="http://mvixusa.com/product/ultiopro">Mvix UltioPro (MX-880HD) HD Media Center with PVR</a></li><li><a href="http://www.bodhiboxes.com/index.php?option=com_content&amp;view=article&amp;id=10&amp;Itemid=17">BodhiBoxes - Home Theater Personal Computer - Configure</a></li></ul>    <br /><b>Hardware - Parts</b><br /><ul><li><a href="http://www.google.com/products?q=nmediapc+htpc+2000b&amp;hl=en&amp;output=nojs">nmediapc htpc 2000b - Google Product Search</a></li><li><a href="http://www.google.com/products?q=intel+core+2+quad+q8400&amp;hl=en&amp;output=nojs">intel core 2 quad q8400 - Google Product Search</a></li><li><a href="http://www.google.com/products?q=lg+CH08LS10&amp;hl=en&amp;output=nojs">lg CH08LS10 - Google Product Search</a></li></ul>  <br /><b>Software and OS</b><br /><ul><li><a href="http://www.boxee.tv/">Boxee</a></li><li><a href="http://www.elementmypc.com/main/">Element OS: Linux on your HTPC</a></li><li><a href="http://www.mythbuntu.org/about">About Mythbuntu | Mythbuntu</a></li><li><a href="http://www.linuxmce.org/">Welcome to LinuxMCE</a></li><li><a href="http://knoppmyth.net/knoppmyth.html">KnoppMyth</a></li><li><a href="http://geexbox.org/en/index.html">GeeXboX HomePage</a></li></ul>     <br /><b>Network Storage</b><br /><ul><li><a href="http://www.shopping.hp.com/product/computer/categories/home_servers/1/accessories/FL702AA%2523ABA;HHOJSID=dVn4LdMJq4ls00VSvQvFH4bRJR9T82wLy4nVJLn25KB81KF1Pvpz%21181851530">HP® Official Store — Buy the HP MediaSmart Server LX195 direct from HP</a></li></ul> <br /><b>Recorders</b><br /><ul><li><a href="http://www.hauppauge.com/index.htm">Hauppauge Computer Works</a></li><li><a href="http://mvixusa.com/product/ultiopro">Mvix UltioPro (MX-880HD) HD Media Center with PVR</a></li></ul>  <br /><b>Antennas</b><br /><ul><li><a target="HDTV Indoor / Outdoor Antenna" title="HDTV Indoor / Outdoor Antenna" href="http://www.monoprice.com/products/product.asp?c_id=109&amp;cp_id=10901&amp;cs_id=1090102&amp;p_id=4730&amp;seq=1&amp;format=4#feedback">HDMI Cable, Home Theater Accessories, HDMI Products, Cables, Adapters, Video/Audio Switch, Networking, USB, Firewire, Printer Toner, and more!</a></li></ul> <br /><b>Remotes</b><br /><ul><li><a href="http://gizmodo.com/5435219/lenovos-multimedia-remote-with-keyboard">Lenovo&#8217;s Multimedia Remote with Keyboard - trackpad - Gizmodo</a></li><li><a href="http://www.gmote.org/">Gmote &gt; Android Remote</a></li><li><a href="http://www.logitech.com/index.cfm/keyboards/keyboard/devices/3848&amp;cl=us,en">diNovo Mini™</a></li><li><a href="http://www.google.com/products?q=HTPCKB&amp;hl=en">HTPCKB - Google Product Search</a></li></ul>   <br /><b>Cables/Converters</b><br /><ul><li><a href="http://www.monoprice.com/products/search.asp?keyword=vga+to+hdmi&amp;x=24&amp;y=15">HDMI Cable, Home Theater Accessories, HDMI Products, Cables, Adapters, Video/Audio Switch, Networking, USB, Firewire, Printer Toner, and more!</a></li><li><a href="http://sewelldirect.com/ATLONA-VGA-TO-HDMI-CONVERTERSCALER.asp">ATLONA VGA TO HDMI CONVERTER/SCALER - AT-HD500, $197.10</a></li></ul>  <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />  <br /><br /><div class="zemanta-pixie"><img class="zemanta-pixie-img" alt="" src="http://img.zemanta.com/pixy.gif?x-id=37492be8-1a37-87f8-8f30-353c32d3f0b9" /></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jerry Joseph and the Jackmormons Live at Blue Nile (upstairs) on 2010-01-23 (January 23, 2010)]]></title>
    <link href="http://jessecravens.com/blog/2010/01/30/jerry-joseph-and-the-jackmormons-live-at-blue-nile-upstairs-on-2010-01-23-january-23-2010/"/>
    <updated>2010-01-30T12:14:19-06:00</updated>
    <id>http://jessecravens.com/blog/2010/01/30/jerry-joseph-and-the-jackmormons-live-at-blue-nile-upstairs-on-2010-01-23-january-23-2010</id>
    <content type="html"><![CDATA[<p><embed type="application/x-shockwave-flash" width="350"     height="24"     allowfullscreen="true"  allowscriptaccess="always"  src="http://www.archive.org/flow/flowplayer.commercial-3.0.5.swf"   w3c="true"  flashvars='config={"key":"#$b6eb72a0f2f1e29f3d4","playlist":[{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d1t01_vbr.mp3","autoPlay":false},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d1t02_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d1t03_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d1t04_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d1t05_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d1t06_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d1t07_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d1t08_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d2t01_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d2t02_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/jj2010-01-23/jj2010-01-24v2_d2t03_vbr.mp3","autoPlay":true}],"clip":{"autoPlay":true},"canvas":{"backgroundColor":"0x000000","backgroundGradient":"none"},"plugins":{"audio":{"url":"http://www.archive.org/flow/flowplayer.audio-3.0.3-dev.swf"},"controls":{"playlist":true,"fullscreen":false,"gloss":"high","backgroundColor":"0x000000","backgroundGradient":"medium","sliderColor":"0x777777","progressColor":"0x777777","timeColor":"0xeeeeee","durationColor":"0x01DAFF","buttonColor":"0x333333","buttonOverColor":"0x505050"}},"contextMenu":[{"Listen+to+jj2010-01-23+at+archive.org":"function()"},"-","Flowplayer 3.0.5"]}'> </embed></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Head For The Hills Live at Hotel Oregon on 2010-01-23 (January 23, 2010)]]></title>
    <link href="http://jessecravens.com/blog/2010/01/30/head-for-the-hills-live-at-hotel-oregon-on-2010-01-23-january-23-2010/"/>
    <updated>2010-01-30T12:07:03-06:00</updated>
    <id>http://jessecravens.com/blog/2010/01/30/head-for-the-hills-live-at-hotel-oregon-on-2010-01-23-january-23-2010</id>
    <content type="html"><![CDATA[<p><embed type="application/x-shockwave-flash" width="350"     height="24"     allowfullscreen="true"  allowscriptaccess="always"  src="http://www.archive.org/flow/flowplayer.commercial-3.0.5.swf"   w3c="true"  flashvars='config={"key":"#$b6eb72a0f2f1e29f3d4","playlist":[{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track01_vbr.mp3","autoPlay":false},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track02_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track03_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track04_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track05_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track06_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track07_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track08_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track09_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track10_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track11_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track12_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track13_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track14_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track15_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track16_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track17_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track18_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track19_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set01track20_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track01_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track02_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track03_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track04_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track05_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track06_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track07_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track08_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track09_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track10_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track11_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track12_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track13_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track14_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track15_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track16_vbr.mp3","autoPlay":true},{"url":"http://www.archive.org/download/headforthehills2010-01-23.matrix.flac16/headforthehills2010-01-23matrix-set02track17_vbr.mp3","autoPlay":true}],"clip":{"autoPlay":true},"canvas":{"backgroundColor":"0x000000","backgroundGradient":"none"},"plugins":{"audio":{"url":"http://www.archive.org/flow/flowplayer.audio-3.0.3-dev.swf"},"controls":{"playlist":true,"fullscreen":false,"gloss":"high","backgroundColor":"0x000000","backgroundGradient":"medium","sliderColor":"0x777777","progressColor":"0x777777","timeColor":"0xeeeeee","durationColor":"0x01DAFF","buttonColor":"0x333333","buttonOverColor":"0x505050"}},"contextMenu":[{"Listen+to+headforthehills2010-01-23.matrix.flac16+at+archive.org":"function()"},"-","Flowplayer 3.0.5"]}'> </embed></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YouTube - Broadcast Yourself - HTML5 version]]></title>
    <link href="http://jessecravens.com/blog/2010/01/30/youtube-broadcast-yourself-html5-version/"/>
    <updated>2010-01-30T09:42:38-06:00</updated>
    <id>http://jessecravens.com/blog/2010/01/30/youtube-broadcast-yourself-html5-version</id>
    <content type="html"><![CDATA[<p><a href="http://www.youtube.com/html5">YouTube - Broadcast Yourself.</a> - <em></em> [<a href="http://delicious.com/cravens/post">delicious.com/cravens</a>]</p>
]]></content>
  </entry>
  
</feed>
