<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Prototypes | Jesse Cravens]]></title>
  <link href="http://jessecravens.com/blog/categories/prototypes/atom.xml" rel="self"/>
  <link href="http://jessecravens.com/"/>
  <updated>2012-10-15T21:09:42-05:00</updated>
  <id>http://jessecravens.com/</id>
  <author>
    <name><![CDATA[Jesse Cravens]]></name>
    <email><![CDATA[jesse.cravens@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upcoming Talk at Devcon5-Austin: Rapid Prototyping HTML5 Applications with NodeJS]]></title>
    <link href="http://jessecravens.com/blog/2012/09/25/upcoming-talk-at-devcon5-austin-rapid-prototyping-html5-applications-with-nodejs/"/>
    <updated>2012-09-25T21:50:00-05:00</updated>
    <id>http://jessecravens.com/blog/2012/09/25/upcoming-talk-at-devcon5-austin-rapid-prototyping-html5-applications-with-nodejs</id>
    <content type="html"><![CDATA[<p>I'm getting ready for an upcoming talk titled: Rapid Prototyping HTML5 Applications with NodeJS, which I will presenting at <a href="http://www.html5report.com/conference/austin2012/Agenda/Agenda-at-a-glance.aspx">Devcon 5 - Austin</a>.</p>

<p>Here is a brief summary:</p>

<p>With HTML5, the modern web browser continues to mature as a capable application platform.
The new specifications are broad, impacting nearly every technology associated with modern web development including graphics, connectivity, client-side storage, offline access, graphics, multimedia, and performance.
JavaScript continues to be front and center as the core language. NodeJS extends JavaScript's event loop paradigm to the server, and provides JavaScript engineers with the ability to produce functionality deeper in the software stack. This phenomenon has had an impact on types of software development ranging from full-scale, enterprise, mobile applications to robot hobbyists platforms.
See innovative example solutions and learn why NodeJS is an ideal development platform for the production acceleration of next-generation HTML5 applications.</p>

<p>This is the beginning of a transition for me. With the release of HTML5 Hacks, I'm beginning to focus more on my ubiquitous JavaScript content. I'm excited, I have a lot to share.</p>

<p>Look for an update with a web based version of the slides.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just moved HTML5 Hacks into Copy/Edit]]></title>
    <link href="http://jessecravens.com/blog/2012/09/24/just-moved-html5-hacks-into-copy-slash-edit/"/>
    <updated>2012-09-24T21:57:00-05:00</updated>
    <id>http://jessecravens.com/blog/2012/09/24/just-moved-html5-hacks-into-copy-slash-edit</id>
    <content type="html"><![CDATA[<p>After a marathon of hackery starting in April, <a href="http://www.oreillynet.com/pub/au/5370">Jeff Burtoft</a> and I pushed out 90 hacks and 435 pages of <a href="http://shop.oreilly.com/product/0636920026273.do">HTML5 Hacks</a> this week. We also had a few guest hackers that created some really great content as well.</p>

<ul>
<li>Raymond Camden of Adobe</li>
<li>Phil Legetter of Pusher.com</li>
<li>Alexander Schulze of jWebsocket</li>
<li><a href="http://j.hn/">John Dyer</a> of Dallas Theological Seminary</li>
<li>Alex Sirota of FoxyTunes</li>
</ul>


<p>Overall, it was a great experience. What I enjoyed the most was getting into a workflow groove, much like when you are building an API or contributing to a project. With each hack, it was necessary to ideate, plan, create the code, test it, and then put it into a understandable format. By the end, I was feeling pretty efficient at kicking out interesting hacks pretty quickly.</p>

<p>I felt as though I improved over time, looking back is always interesting. I like to keep fine tuning and revising, but at some point you have to ship the product. I'm really proud of the work, it has been hard, but I learned a ton in the process.</p>

<p>Most of my hacks I tried to make relevant to real world software development challenges, and mix in a number of HTML5 specifications. Hopefully, that turns out to benefit the reader ... I'm all ears on the feedback. So don't hesitate to drop us a line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migration from Drupal to Octopress]]></title>
    <link href="http://jessecravens.com/blog/2012/09/23/migration-from-drupal-to-octopress/"/>
    <updated>2012-09-23T13:39:00-05:00</updated>
    <id>http://jessecravens.com/blog/2012/09/23/migration-from-drupal-to-octopress</id>
    <content type="html"><![CDATA[<h2>Why?</h2>

<p>For the last 6 years, I have hosted my personal blog using Drupal at bluehost.com, and I finally have made the decision to migrate.</p>

<p>I have been using Ruby on Rails, Sinatra, and Node.js for prototypes, demos, web-based presentations, and production apps, and deploying to Heroku for the past couple of years. The productivity gains and integration with github and social media, have brought me to the point that I'd prefer for my workflow for blogging, updating to my microformats resume and portfolios to be similar to how I create and manage my other content.</p>

<p>So here, it is. Once I have written a proper migration script, and taken care of all the custom urls, I'll post my solution here.</p>

<p>UPDATE:
<div><script src='https://gist.github.com/3895430.js?file='></script>
<noscript><pre><code># inspired by: http://www.infovore.info/blog/2011/09/24/octopress-setup-and-drupal-migration/
# simplified to be dropped in your root Octopress app directory, along with an export (.sql) of your mysql db.

###### Creates post in this basic format ######

#  ---
#  layout: post
#  title: #{title}
#  date: #{time}
#  comments: true
#  categories: #{tag_list}
#  ---       
#  content

################################################


  require 'rubygems'
  require 'sequel'
  require 'fileutils'
  require 'yaml'


  		puts &quot;Building refresh layout&quot;
		File.open(&quot;source/_layouts/refresh.html&quot;, &quot;w&quot;) do |f|
	    f.puts &lt;&lt;EOF    
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url={{ page.refresh_to_post_id }}.html&quot; /&gt;
&lt;/head&gt;
&lt;/html&gt;
EOF
		end

		DB = Sequel.connect(:adapter =&gt; 'mysql', :user =&gt; 'root', :host =&gt; 'localhost', :database =&gt; 'jessecra',:password=&gt;'frog')
		puts DB.tables

		QUERY = &quot;select  node.nid, node.title, node_revisions.body, node.created, node.status, f.name as format, u.dst \
		     from node \
		          join node_revisions on node.vid = node_revisions.vid \
		          join filter_formats f on node_revisions.format = f.format \
		          left join url_alias u on concat('node/', node.nid) = u.src \
		     where (node.type = 'blog' OR node.type = 'story' OR node.type = 'article')&quot;

	     DB[QUERY].each do |post|

	        # Get required fields and construct Jekyll compatible name
	        node_id = post[:nid]
	        # puts node_id
	        title = post[:title]
	        puts title
	        content = post[:body]
	        # puts content
	        created = post[:created]
	        format = post[:format].strip.downcase == 'textile' ? 'textile' : 'markdown'
	        dst  = post[:dst] || nil
	        time = Time.at(created)
	        is_published = post[:status] == 1
	        published = is_published ? nil : false
	        dir = &quot;source&quot;
	        posts_dir = &quot;#{dir}/_posts&quot;
	        slug = title.strip.downcase.gsub(/(&amp;|&amp;amp;)/, ' and ').gsub(/[\s\.\/\\]/, '-').gsub(/[^\w-]/, '').gsub(/[-_]{2,}/, '-').gsub(/^[-_]/, '').gsub(/[-_]$/, '')
	        name = time.strftime(&quot;%Y-%m-%d-&quot;) + slug + '.' + format
	        # puts name

	        tag_query = &quot;select distinct node.nid, type, td.name \
	                     from node \
	                          join term_node tn on node.nid = tn.nid \
	                          join term_data td on tn.tid = td.tid \
	                     where node.nid = #{node_id} order by node.nid&quot;
	        tags = []
	        DB[tag_query].each do |tag|
	          stripped_tag = tag[:name].gsub /&quot;/, '|'
	          tags.push stripped_tag
	        end
	        tag_list = tags.length == 0 ? nil : tags
	        
	        puts tag_list

	        # Write out the data and content to file
	        File.open(&quot;#{posts_dir}/#{name}&quot;, &quot;w&quot;) do |f|
	          f.puts &quot;---&quot;
	          f.puts &quot;layout: post&quot;
	          f.puts &quot;title: \&quot;#{title}\&quot;&quot; 
	          f.puts &quot;date: #{time}&quot; 
	          f.puts &quot;comments: true&quot;
	          f.puts &quot;categories: #{tag_list}&quot;
	          f.puts &quot;---&quot;
	          f.puts content
	        end

	        # Make a file to redirect from the old Drupal URL
	        if is_published
	          FileUtils.mkdir_p(dir + &quot;/node/#{node_id}&quot;)
	          File.open(dir + &quot;/node/#{node_id}/index.md&quot;, &quot;w&quot;) do |f|
	            f.puts &quot;---&quot;
	            f.puts &quot;layout: refresh&quot;
	            f.puts &quot;refresh_to_post_id: /blog/#{time.strftime(&quot;%Y/%m/%d/&quot;) + slug}/index&quot;
	            f.puts &quot;---&quot;
	          end
	          if dst
	            FileUtils.mkdir_p(&quot;#{dir}/#{dst}&quot;)
	            File.open(&quot;#{dir}/#{dst}/index.md&quot;, &quot;w&quot;) do |f|
	              f.puts &quot;---&quot;
	              f.puts &quot;layout: refresh&quot;
	              f.puts &quot;refresh_to_post_id: /blog/#{time.strftime(&quot;%Y/%m/%d/&quot;) + slug}/index&quot;
	              f.puts &quot;---&quot;
	            end
	          end
	        end
	      end</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
