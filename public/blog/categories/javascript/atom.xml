<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Jesse Cravens]]></title>
  <link href="http://jessecravens.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://jessecravens.com/"/>
  <updated>2012-12-02T17:24:29-06:00</updated>
  <id>http://jessecravens.com/</id>
  <author>
    <name><![CDATA[Jesse Cravens]]></name>
    <email><![CDATA[jesse.cravens@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Client/Server 3.0: 6 Ways JavaScript is Revolutionizing the Client/Server Relationship]]></title>
    <link href="http://jessecravens.com/blog/2012/11/28/client-server-3-dot-0-6-ways-javascript-is-revolutionizing-the-client-server-relationship/"/>
    <updated>2012-11-28T10:02:00-06:00</updated>
    <id>http://jessecravens.com/blog/2012/11/28/client-server-3-dot-0-6-ways-javascript-is-revolutionizing-the-client-server-relationship</id>
    <content type="html"><![CDATA[<p>Im giving a talk at Devcon 5 - San Francisco this afternoon: Client/Server 3.0: 6 Ways JavaScript is Revolutionizing the Client/Server Relationship. Here is the other talks on the agenda: <a href="http://www.html5report.com/conference/california/agenda.aspx">Devcon 5 - San Francisco</a>.</p>

<p>Here is a brief summary:</p>

<h3>1 Device Access Within the Browser</h3>

<p>The client gets smarter.</p>

<p>JavaScript Device APIs continue to evolve, allowing more access to device hardware, services and applications such as the camera, microphone, system sensors, native address books, calendars and native messaging applications.
We will explore examples utilizing GeoLocation API, and Device Orientation.</p>

<h3>2 Client Side Processing w/ Background Threads</h3>

<p>The modern web browser's runtime is a single threaded, event loop. Asynchronous programming models, reactionary systems design actually benefit from this architecture. Maturing interpreters improve performance. Web Workers API enables background threads in the browser, making heavy computations realistic.</p>

<p>So, the client gets more powerful, and becomes an application development evnvironment.
We will explore Web Workers processing heavy computations without blocking the UI for further user interaction.</p>

<h3>3 Device Detection and Descriptors / Adaptive Frameworks</h3>

<p>Responsive Web Design is great, but it often isn't enough for larger applications, and applications that need to reach a highly fragmented device market. Adaptive frameworks use DDRs (Device Description Repositories)</p>

<p>We will explore a framework that mixes the best of Responsive with the best of Adaptive: <a href="https://github.com/jessecravens/responderjs">respnderJS</a>.</p>

<h3>4 HTML5 Connectivity Revolution and HTTP 2.0</h3>

<p>Peter Lubbers coined the term, HTML5 Connectivity Revolution, to describe the next level, web network technologies such as: Web Sockets API, XHR2, Event Source and Server Sent Events, SPDY, CORS.</p>

<p>Engage in a demo of <a href="https://github.com/jessecravens/robodeck">Robodeck</a>, a Web Socket driven Collaborative presenations framework.</p>

<h3>5 Single Runtime, Shared Syntax</h3>

<p>Node.js has enabled the same language, single runtime. But, the paradigms are still quite different. Node streams, inspired by Linux pipes, make IO easy and intuitive. Explore pipe(), pump(), and events in Node streams.</p>

<p>Solutions like Browserify, help bring Node.js libraries and NPM dependency management to the browser. Next up, Domnode, wrapping common I/O bound APIs (XHR, SSE, WebRTC, etc.) in Node streams syntax.</p>

<h3>6 Embedded JavaScript</h3>

<p>With Node.js and Angstrom Linux, and cloud document stores like MongoDB, the server is now embedded in the Micro Controller client.
We will explore Arduino wrappers, and Node.js running on the Beaglebone from Texas Instruments.</p>

<p>The combination of Linux and JavaScript open worlds of opportunity.</p>

<script async class="speakerdeck-embed" data-id="507da9caa2a4030002063d67" data-ratio="1.299492385786802" src="http://jessecravens.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Modules]]></title>
    <link href="http://jessecravens.com/blog/2012/06/17/javascript-modules/"/>
    <updated>2012-06-17T16:23:21-05:00</updated>
    <id>http://jessecravens.com/blog/2012/06/17/javascript-modules</id>
    <content type="html"><![CDATA[<p>For a talk last March at USAA's internal Tech X conference, I put together a demo of JavaScript script loaders, module definitions, dependency management, and polyfill support: <a href="http://jessecravens.github.com/js-modules-demo">JavaScript Modules</a>.</p>


<p><a href="http://jessecravens.github.com/js-modules-demo/"><img class="imgL" width="500px" src="http://jessecravens.com/images/blogposts/js-modules.png"></a></p>

<p>This demonstrates the following Module Definitions:</p>




<ul>
<li>AMD</li>
<li>CommonJS</li>
<li>YUI3</li>
<li>JS Harmony</li>
</ul>




<p>And a few script loaders:</p>




<ul>
<li>RequireJS</li>
<li>yepnope</li>
<li>YUI3 - YUI Loader</li>
</ul>




<p>If you want to know more about the state of modules, dependency loading and management in the JavaScript world, there is always room for more contributors, just fork or clone the project ... and you will have a playground to begin playing with some of the most popular implementations.</p>


<p>To learn more, check it out here: <a href="http://jessecravens.github.com/js-modules-demo/">jessecravens.github.com/js-modules-demo</a></p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Robodeck]]></title>
    <link href="http://jessecravens.com/blog/2012/05/22/robodeck/"/>
    <updated>2012-05-22T10:01:42-05:00</updated>
    <id>http://jessecravens.com/blog/2012/05/22/robodeck</id>
    <content type="html"><![CDATA[<p>Awhile back, I built a websocket powered interactive presentation framework called <a href="https://github.com/jessecravens/robodeck">Robodeck</a>.</p>


<p>The solution uses the following technologies:</p>




<ul>
<li>Node.js</li>
<li>Socket.io</li>
<li>WebSockets</li>
<li>GeoLocation APIs</li>
<li>Deck.js</li>
</ul>




<p>To name a few.</p>


<p>To learn more, check it out here: <a href="http://jessecravens.github.com/robodeck">http://jessecravens.github.com/robodeck</a></p>


<p><a href="http://jessecravens.github.com/robodeck"><img class="imgL" width="500px" src="http://jessecravens.com/images/blogposts/robodeck.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Wokers: Basics of the Web Browser's UI Thread]]></title>
    <link href="http://jessecravens.com/blog/2011/12/11/hack-82-web-wokers-basics-of-the-web-browsers-ui-thread/"/>
    <updated>2011-12-11T11:08:01-06:00</updated>
    <id>http://jessecravens.com/blog/2011/12/11/hack-82-web-wokers-basics-of-the-web-browsers-ui-thread</id>
    <content type="html"><![CDATA[<h2>Single Threadin'</h2>

<p>As we set out to build a highly responsive UI for our demo web application, we must fully understand how browsers manage processes. Perhaps the biggest challenge we will face has to do with browsers using a single thread for both JavaScript execution and user interface updates. While the browser's JavaScript interpreter is executing code, the UI is unable to respond to the user's input. If a script is taking a long time to complete, after a specified amount of time the browser will provide the user an option to terminate the script. To accommodate for the 'freeze' associated with scripts that exceed the browser execution time limit, web developers have traditionally created smaller units of work and used JavaScript timers to return execution to the next event in the queue. As you will see, web workers solve the locking of the UI thread by opening an additional thread, or even multiple threads, for execution of these long running, processor intensive tasks.</p>

<p>When designing your application, especially if you come from more of a 'server-side' or Java background, it is important to understand that non-blocking execution is not the same as concurrent threading. While not extremely complex, JavaScript's event driven style does take some getting used to for developers coming from other languages such as Java and C. Later, we will touch on a few examples where we pass a callback continuation function to take full advantage of JavaScript's non blocking design.</p>

<h2>Thread Safety</h2>

<p>Mozilla, in particular, provides a Worker interface which web workers implement. While the Worker interface spawns OS-level threads, web workers use the postMessage mechanism to send messages (with serializable objects) between the two execution contexts. To ensure thread safety the worker is only given access to thread safe components to include the following:</p>

<ul>
<li>timers: setTimeout() and setInterval() methods</li>
<li>XMLHttpRequest</li>
<li>importScripts() method</li>
</ul>


<p>The worker script can also make use of:</p>

<ul>
<li>navigator and location objects</li>
<li>native JavaScript objects such as Object, String, Date</li>
</ul>


<p>At the same time, the worker restricts access to DOM APIs, global variables, and the parent page. In Hack #84 Building the DOM with web workers and Handlebars.js, we will explore the restricted access to DOM APIs, and introduce JavaScript templating, importScripts, and the use of timers to poll for postMessage.</p>

<h2>HTML5 Web Workers</h2>

<p>As mentioned earlier, the Web worker spec defines an API for executing scripts in the background by spawning an independent execution context.</p>

<p>It is important to note that web workers are costly, having an impact on startup and overall memory consumption. So, they are intended to be used lightly and in conjunction with the some of the asynchronous techniques mentioned earlier. A well built client-side application would typically make use of one or two cases where tasks are expensive. Here are a few common uses cases:</p>

<ul>
<li>Single Page Application bootstrapping large amounts of data during initial load</li>
<li>Performing long running mathematical calculations in the browser</li>
<li>Processing large JSON datasets</li>
<li>Text formatting, spell checking, and syntax highlighting</li>
<li>Processing multimedia data (Audio/Video)</li>
<li>Long polling webservices</li>
<li>Filtering images in canvas</li>
<li>Calculating points for a 3D image</li>
<li>Reading/Writing of local storage database</li>
</ul>


<h2>Long Running Scripts</h2>

<p>Our first web worker hack will be a long running script with heavy computation. It will execute 2 loops that output a two-dimensional array. First, we will use this computation to lock up the browser's UI thread, and later we will move the task to a worker.</p>

<p>{% codeblock init.js %}</p>

<p>  function init() {</p>

<pre><code>var r = 1000;
var c = 1000;
var a = new Array(r);

for (var i = 0; i &lt; r; i++) {
    a[i] = new Array(c);

    for (var j = 0; j &lt; c; j++) {
        a[i][j] = "[" + i + "," + j + "]";
    }
}
</code></pre>

<p>  }</p>

<p>  window.onload = init;</p>

<p>{% endcodeblock %}</p>

<h2>Spawning a Worker</h2>

<p>Now let's move our heavy computational task to a dedicated web worker, so that the user doesn't have to wait for the script to complete execution in order to interact with user interface. First, lets spawn a new worker:</p>

<p>{% codeblock spawn.js %}</p>

<p>  var worker = new Worker('highComp.js');</p>

<p>  worker.postMessage(JSON.stringify(message));</p>

<p>  worker.addEventListener('message', function(event){}, false);</p>

<p>{% endcodeblock %}</p>

<p>Here, we define an external file that will contain the logic of our heavy computational task. The file, highComp.js will listen for a message that will receive the serialized JSON payload, and then we will set up an additional listener to receive a message back from highComp.js.</p>

<p>Now, we can move this cpu-intensive task to a separate file: highComp.js</p>

<p>{% codeblock highComp.js %}
var r = 1000;
var c = 1000;</p>

<p>var a = new Array(r);</p>

<p>for (var i = 0; i &lt; r; i++) {
  a[i] = new Array(c);</p>

<pre><code>for (var j = 0; j &lt; c; j++) {
 a[i][j] = "[" + i + "," + j + "]";
}
</code></pre>

<p>};
postMessage(a);
{% endcodeblock %}</p>

<p>In highComp.js, our two dimensional array is built and set to variable a. It is then passed back to our main script via the postMessage call.</p>

<p>In the next hack, we will mix our use of timers with the power of a dedicated worker. As we send messages (passing serializable objects as a parameter to postMessage) back and forth to code running in the shared UI thread, our timer will periodically send and check for new messages and use their contents to modify the DOM.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YUI3 Rails Application Template]]></title>
    <link href="http://jessecravens.com/blog/2011/01/30/yui3-rails-application-template/"/>
    <updated>2011-01-30T01:02:15-06:00</updated>
    <id>http://jessecravens.com/blog/2011/01/30/yui3-rails-application-template</id>
    <content type="html"><![CDATA[<p>I decided to put together a Rails template to generate a quick sqlite3 db driven web app to test out <a href="http://developer.yahoo.com/yui/3/">YUI3</a> functionality quickly. Rails 3 makes it super simple to quickly generate real JSON data for testing out various YUI 3 components such as DataSource.</p>

<p>The template takes care of removing the Prototype library, including yui-debug.js and the CSS framework including reset, and the new <a href="http://developer.yahoo.com/yui/3/cssgrids/">Grids</a> - currently in beta. I also wanted to deliver my basic markup quickly so I've added <a href="http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html#html_elements">Haml</a></p>

<p>Since I have been disciplining myself to follow Test Driven Development on the server, I included all of my Rails testing dependencies in the app template as well (RSpec, Cucumber, WebRat, Factory Girl) and I plan to continue to leverage <a href="http://developer.yahoo.com/yui/3/test/">YUI Test</a> on the client as I run through browser validations of the <a href="http://developer.yahoo.com/yui/3/examples/datasource/datasource_polling.html">datasource-polling sub-module</a>. Clone the rails app template <a href="https://github.com/jessecravens/yui3-rails-template">here</a>.</p>

<p>{% codeblock yui-rails.rb %}</p>

<h1>YUI3 Application Generator Template</h1>

<h1>Generates a Rails app; includes YUI3, Haml, RSpec, Cucumber, WebRat, Factory Girl ...</h1>

<p>puts "Generating a new YUI3 Rails app"</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Create the database</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>puts "creating the database..."
run 'rake db:create:all'</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>GIT</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>puts "setting up 'git'"</p>

<p>append_file '.gitignore' do &lt;<-FILE
'.DS_Store'
'.rvmrc'
FILE
end
git :init
git :add => '.'
git :commit => "-m 'Initial Commit of YUI3 Rails App'"</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Remove files</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>puts "removing files..."
run 'rm public/index.html'
run 'rm public/favicon.ico'
run 'rm public/images/rails.png'
run 'rm README'
run 'touch README'</p>

<p>puts "banning spiders from your site by changing robots.txt..."
gsub_file 'public/robots.txt', /# User-Agent/, 'User-Agent'
gsub_file 'public/robots.txt', /# Disallow/, 'Disallow'</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Haml</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>  puts "setting up Gemfile for Haml..."
  append_file 'Gemfile', "\n# Bundle gems needed for Haml\n"
  gem 'haml', '3.0.18'
  gem 'haml-rails', '0.2', :group => :development</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Set up YUI3</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>puts "replacing Prototype with YUI3"
run 'rm public/javascripts/controls.js'
run 'rm public/javascripts/dragdrop.js'
run 'rm public/javascripts/effects.js'
run 'rm public/javascripts/prototype.js'
run 'rm public/javascripts/rails.js'</p>

<p>get "http://yui.yahooapis.com/combo?3.3.0/build/yui/yui-debug.js",  "public/javascripts/yui-debug.js"
get "http://yui.yahooapis.com/3.3.0/build/cssreset/reset.css",  "public/stylesheets/reset.css"
get "http://yui.yahooapis.com/3.3.0/build/cssbase/base.css",  "public/stylesheets/base.css"
get "http://yui.yahooapis.com/3.3.0/build/cssfonts/fonts.css",  "public/stylesheets/fonts.css"
get "http://yui.yahooapis.com/3.3.0/build/cssgrids/grids.css",  "public/stylesheets/grids.css"</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Create an index page</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>puts "create a home controller and view"
generate(:controller, "home index")
gsub_file 'config/routes.rb', /get \"home\/index\"/, 'root :to => "home#index"'
append_file 'app/views/home/index.html.haml'do &lt;<-FILE
!!!
%h2{:class => "subtitle"} Get Started
%p{:class => "content"} Update application.js with your logic
%div{:class => "container", :id => "container"}
%div{:id => "testLogger"}
FILE
end</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Generate Application Layout</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>run 'rm app/views/layouts/application.html.erb'
  create_file 'app/views/layouts/application.html.haml' do &lt;&lt;-FILE
!!!
%html
  %head</p>

<pre><code>%title YUI3 App
= stylesheet_link_tag "reset"
= stylesheet_link_tag "base"
= stylesheet_link_tag "fonts"
= stylesheet_link_tag "grids"
= stylesheet_link_tag "application"
= javascript_include_tag :all
= csrf_meta_tag
</code></pre>

<p>  %body{:class =>"yui3-skin-sam  yui-skin-sam"}</p>

<pre><code>= yield
</code></pre>

<p>FILE
end</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Add Stylesheets</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>create_file 'public/stylesheets/application.css' do &lt;&lt;-FILE
div.container {
  width: 100%;
  height: 100px;
  padding: 10px;
  margin: 10px;
  border: 1px solid red;
}</p>

<h1>testLogger {</h1>

<pre><code>margin-bottom: 1em;
</code></pre>

<p>}</p>

<h1>testLogger .yui3-console .yui3-console-title {</h1>

<pre><code>border: 0 none;
color: #000;
font-size: 13px;
font-weight: bold;
margin: 0;
text-transform: none;
</code></pre>

<p>}</p>

<h1>testLogger .yui3-console .yui3-console-entry-meta {</h1>

<pre><code>margin: 0;
</code></pre>

<p>}</p>

<p>.yui3-skin-sam .yui3-console-entry-pass .yui3-console-entry-cat {</p>

<pre><code>background: #070;
color: #fff;
</code></pre>

<p>}</p>

<p>FILE
end</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Initialize YUI and add YUI Test</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>append_file 'public/javascripts/application.js' do &lt;&lt;-FILE</p>

<p>  YUI({ filter: 'raw' }).use("node", "console", "test",function (Y) {</p>

<pre><code>  Y.namespace("example.test");

  Y.example.test.DataTestCase = new Y.Test.Case({

      //name of the test case - if not provided, one is auto-generated
      name : "Data Tests",

      //---------------------------------------------------------------------
      // setUp and tearDown methods - optional
      //---------------------------------------------------------------------

      /*
       * Sets up data that is needed by each test.
       */
      setUp : function () {
          this.data = {
              name: "test",
              year: 2007,
              beta: true
          };
      },

      /*
       * Cleans up everything that was created by setUp().
       */
      tearDown : function () {
          delete this.data;
      },

      //---------------------------------------------------------------------
      // Test methods - names must begin with "test"
      //---------------------------------------------------------------------

      testName : function () {
          var Assert = Y.Assert;

          Assert.isObject(this.data);
          Assert.isString(this.data.name);
          Assert.areEqual("test", this.data.name);            
      },

      testYear : function () {
          var Assert = Y.Assert;

          Assert.isObject(this.data);
          Assert.isNumber(this.data.year);
          Assert.areEqual(2007, this.data.year);            
      },

      testBeta : function () {
          var Assert = Y.Assert;

          Assert.isObject(this.data);
          Assert.isBoolean(this.data.beta);
          Assert.isTrue(this.data.beta);
      }

  });

  Y.example.test.ArrayTestCase = new Y.Test.Case({

      //name of the test case - if not provided, one is auto-generated
      name : "Array Tests",

      //---------------------------------------------------------------------
      // setUp and tearDown methods - optional
      //---------------------------------------------------------------------

      /*
       * Sets up data that is needed by each test.
       */
      setUp : function () {
          this.data = [0,1,2,3,4]
      },

      /*
       * Cleans up everything that was created by setUp().
       */
      tearDown : function () {
          delete this.data;
      },

      //---------------------------------------------------------------------
      // Test methods - names must begin with "test"
      //---------------------------------------------------------------------

      testPop : function () {
          var Assert = Y.Assert;

          var value = this.data.pop();

          Assert.areEqual(4, this.data.length);
          Assert.areEqual(4, value);            
      },        

      testPush : function () {
          var Assert = Y.Assert;

          this.data.push(5);

          Assert.areEqual(6, this.data.length);
          Assert.areEqual(5, this.data[5]);            
      },

      testSplice : function () {
          var Assert = Y.Assert;

          this.data.splice(2, 1, 6, 7);

          Assert.areEqual(6, this.data.length);
          Assert.areEqual(6, this.data[2]);           
          Assert.areEqual(7, this.data[3]);           
      }

  });    

  Y.example.test.ExampleSuite = new Y.Test.Suite("Example Suite");
  Y.example.test.ExampleSuite.add(Y.example.test.DataTestCase);
  Y.example.test.ExampleSuite.add(Y.example.test.ArrayTestCase);

  //create the console
  var r = new Y.Console({
      newestOnTop : false,
      style: 'block' // to anchor in the example content
  });

  r.render('#testLogger');

  Y.Test.Runner.add(Y.example.test.ExampleSuite);

  //run the tests
  Y.Test.Runner.run();
</code></pre>

<p>  });</p>

<p>FILE
end</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Setup RSpec &amp; Cucumber</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>puts 'Setting up RSpec, Cucumber, webrat, factory_girl, faker'
append_file 'Gemfile' do &lt;<-FILE
group :development, :test do
  gem "rspec-rails", ">= 2.0.1"
  gem "cucumber-rails", ">= 0.3.2"
  gem "webrat", ">= 0.7.2.beta.2"
  gem "factory_girl_rails"
  gem "faker"
end
FILE
end</p>

<p>run 'bundle install'
run 'script/rails generate rspec:install'
run 'script/rails generate cucumber:install'
run 'rake db:migrate'
run 'rake db:test:prepare'</p>

<p>run 'touch spec/factories.rb'</p>

<h1>----------------------------------------------------------------------------</h1>

<h1>Finish up</h1>

<h1>----------------------------------------------------------------------------</h1>

<p>puts "Commiting to Git repository..."
git :add => '.'
git :commit => "-am 'Setup Complete'"</p>

<p>puts "DONE - setting up your YUI3 Rails App."</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
